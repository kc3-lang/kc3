1 + 1
1 + 10000000000000000000000000000000000000000000000000
2 * 10000000000000000000000000000000000000000000000000
type(10000000000000000000000000000000000000000000000000)
type(1)
type(255)
type(256)
quote fn (x) { x * x }
quote if true do if false do 1 else fn (x) { x * x } end end
quote if true do if false do 1 else fn (x) do x * x end end end
quote if true do if false do %KC3.Operator{sym: :-, symbol_value: 3} else fn (x) do x * x end end end
if true do if true do %KC3.Operator{sym: :-, symbol_value: 3} else fn (x) do x * x end end end
type(0)
type(-1)
def operator_muul = %KC3.Operator{sym: :****, symbol_value: fn (a, b) { a * a + b * b }
}
3 **** 5
3 * 3 + 5 * 5
system(["ls", "-l"])
tem(["ls", "-l"])
human_size(2024024)
to_lisp
to_lisp(quote 1 + 1)
to_lisp(quote 1 + 1 * 2 / 3 - 4)
to_lisp(quote a = ?; a <- 1; a)
Facts.database()
a = Facts.database()
(Facts) a
a = Facts.env_db()
(Facts) a
db = ^ a
(Facts) db
Facts.with(db, [[KC3, :operator, op = ?], [op, :sym, sym = ?]], fn (fact) { puts("#{op} #{sym}") })
op
sym
Facts.with(db, [[KC3, :operator, op = ?], [op, :sym, sym = ?]], fn (fact) { puts("#{op} #{sym}") })
Facts.with(Facts.env_db(), [[KC3, :operator, op = ?], [op, :sym, sym = ?]], fn (fact) { puts("#{op} #{sym}") })
Facts.with(Facts.env_db(), [[KC3, :operator, op = ?], [op, :sym, sym = ?]], fn (fact) { puts("#{inspect(op)} #{inspect(sym)}") })
[[KC3, :operator, op = ?], [op, :sym, sym = ?]]
%HTTP.Request{}
quote %HTTP.Request{}
quote %HTTP.Request{url: "/plop"}
quote %HTTP.Request{method: GET, url: "/plop"}
quote %HTTP.Request{method: GET, url: "/plop", body: void}
quote [a: 1, b: 2]
[a: 1, b: 2]
AList.to_map([a: 1, b: 2])
1 + 1
1 + 100000000000000000000000000000000000000000000000000000000
type(1 + 100000000000000000000000000000000000000000000000000000000)
type(1 + 1)
type(255)
type(256)
type(1)
type(1 + 256)
1 + 256
(U8) 256
(U8) 257
(U16) 1
(Str) 1
(Str) 100000000000000000000000000000000000000000000000000000000
(Str) 100000
(Str) %{a: 1, b: 2}
puts(inspect(%{a: 1, b: 2}))
puts(inspect(quote if true do 1 else %{a: 1, b: 2} end))
puts(quote if true do 1 else %{a: 1, b: 2} end)
quote 1 + 1
type(quote 1 + 1)
type(quote plop(1 + 1))
type(quote quote plop(1 + 1))
def eval = macro (args) { args }
eval(quote 1 + 1)
eval(1 + 1)
def eval = macro (args) { unquote(args) }
eval(1 + 1)
def eval = macro (args) { args }
eval(1 + 1)
eval(quote 1 + 1)
a = %KC3.Operator{sym: :****, symbol_value: fn (a, b) { (a + b) * 4 }}
def op_muul = %KC3.Operator{sym: :****, symbol_value: fn (a, b) { (a + b) * 4 }}
3 **** 4
3 //// 4
def op_muul = %KC3.Operator{sym: :////, symbol_value: fn (a, b) { (a - b) * 4 }}
3 //// 4
{a, b, c} = {1, 2, 3}
%{a: a, b: b, c: c} = %{a: 1, b: 2, c: 3}
a
b
c
Compare.str_case_insensitive("Range", "range")
!Compare.str_case_insensitive("Range", "range")
! Compare.str_case_insensitive("Range", "range")
! 0
quit
q
exit
exit(Ã)
exit()
Map.put(%{}, :a, 1)

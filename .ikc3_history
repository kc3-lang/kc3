end
while i < 3 do
while (i) < 3 do
while i < 3 do
while i < 3 {
while i < 3 {end
end
}
end
}
end
while i < 3 do
i = 0 ; while i < 5 do puts("i = #{i}") ; i = i + 1 ; :ok end
1+1
1+ 2
continue
quote continue
type(quote continue)
type(quote break)
to_lisp(quote break)
to_lisp(quote continue)
continue
c = cfn Void "kc3_continue" ()
c()
continue
to_lisp(quote continue)
type(quote continue)
unquote(quote continue)
def c = macro () { quote continue }
c()
quote (Ident) continue
type(quote (Ident) continue)
type(quote (Ident) Test.sym)
"\xFF"
Str.has_reserved_characters("\xFF")
Str.has_reserved_characters?("\xFF")
Str.has_reserved_characters?("\0")
Str.has_reserved_characters?("\xFF")
"\xFF"
(Str) (Character) 0xFF
(Character) 0xFF
(Str) 0xFF
"\xFF"
"\xFF"[0]
s = "\xFF"
s[0]
s = "abc"
s[0]
s = "abc"
Str.byte(s, 0)
(Character) 97
s = "\xFF"
Str.byte(s, 0)
%Time{tv_sec: 1 + 1, tv_nsec: 2 + 2}
Time.now()
require Time
Time.now()
a = Time.now()
b = Time.now()
uptime()
Time.diff_to_str(uptime())
require Time
Time.diff_to_str(uptime())
uptime()
Time.diff_to_str(uptime())
require Time
Time.diff_to_str(uptime())
stacktrace()
a = fn () { stacktrace() }
a()
a = fn (x) { if x > 0 do a(x - 1) else stacktrace() end }
a = void
a = fn (x) { if x > 0 do a(x - 1) else stacktrace() end }
a = (Fn) ? ; fn (x) { if x > 0 do a(x - 1) else stacktrace() end }
a = (Fn) ? ; a = fn (x) { if x > 0 do a(x - 1) else stacktrace() end }
a = (Fn) ?
a = fn (x) { if x > 0 do a(x - 1) else stacktrace() end }
a
a = fn (x) { if x > 0 do a(x - 1) else stacktrace() end }
a = ?
a = fn (x) { if x > 0 do a(x - 1) else stacktrace() end }
a(1)
quote a
type(quote a)
quote a
quote KC3.a
require Marshall
Marshall.tag_to_str(1 + 1)
Marshall.tag_to_str(quote 1 + 1)
Marshall.tag_to_str(quote quote 1 + 1)
Marshall.tag_to_str(quote 1 + 1)
Marshall.tag_to_str(5)
Marshall.tag_to_str(quote 1 + 1)
Marshall.tag_to_str(1 + 1)
Str.inspect_hex(Marshall.tag_to_str(1 + 1))
require Str
Str.inspect_hex(Marshall.tag_to_str(1 + 1))
require Marshall
Str.inspect_hex(Marshall.tag_to_str(1 + 1))

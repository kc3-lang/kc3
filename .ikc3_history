a
module()
defmodule Plop do
  def m = fn () { module() }
end
Plop.m()
module()
List.reverse([1, 2, 3])
List.reverse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
(List) {1, 2}
?
cow 1
(Tag) cow 1
a = cow 1
a
a + 1
cow 1
type(cow 1)
cow 1 + cow 1
cow(1) + cow(1)
quote [a: 1, b: 2]
quote [{:a, 1}, {:b, 2}]
%C3.Operator{}
%GL.Vertex{}
123.456
abc.def
%{a: 1}
%{a: 1}.a
x = %C3.Operator{}
x.sym
quote x.sym
x = %C3.Operator{}
x.sym
x = %{
x = %C3.Operator{sym: :-}
x = %C3.Operator{sym: 1}
x = %C3.Operator{sym: (Sym) "1"}
x = %C3.Operator{sym: :1}
x = %KC3.Operator{sym: :1}
s = Socket.listen("localhost", 8000)
(s8) -128
(S8) -128
type(-128)
type(-127)
128*128
128 * 128
256 * 256 - 1
type(256 * 256 - 1)
type(-256 * 256 - 1)
type(-256 * 256 + 1)
-256 * 256 + 1
type(-65536 * 65536 + 1)
type(-65536 * 65536 - 1)
type(-65536 * 65536 + 1)
-256 * 256 + 1
type(-256 * 256 + 1)
type(-256 * 256 / 8 + 1)
type(-256 * 256 / 2 + 1)
type(-256 * 128 + 1)
type(-256 * 128 + 2)
type(-256 * 256 / 2 + 1)
type(-128 * 128 / 2 + 1)
type(-255 * 256 / 2 + 1)
type(-255 * 256 + 1)
-255 * 256 + 1
-255 * 256
-256 * 256 / 2
-256 * 256 / 2 + 1
type(-32767)
type(-256 * 256 / 2 + 1)
-32767
type(-32767)
(S16) -32767
i = type(-32767)
-32768 * 65536
-32768 * 65536 + 1
-2147483648 * 65536 * 65536 + 1
q
%KC3.Operator{}
%KC3.Operator{sym: :-}
op = %KC3.Operator{sym: :-}
op.sym
op = %{id: 1, sym: :-}
op.id
type(op.id)
type(op.sym)
(Str) op.sym
[fd: (S32) -1]
load("https://git.kmx.io/kc3-lang/kc3/
)
load("lib/kc3/0.1/s32.facts")
(S32) 1
(S32) -1
[fd: (S32) -1]
defmodule Socket do defstruct [fd: (S32) -1]; end
defmodule Socket do
dlopen("lib/kc3/0.1/http.so")
def connect = cfn Socket.Buf "socket_buf_init_connect" (Result, Str, Str)
end

Str.ftime(Time.now(), "%a")
Str.ftime(Time.now(), "%a, %d")
Str.ftime(Time.now(), "%a, %G")
Str.ftime(Time.now(), "%a, %m %d %G")
Str.ftime(Time.now(), "%a, %b %d %G")
Str.ftime(Time.now(), "%a, %b %d %G %T %Z")
cow 1
cow(1)
cow 1
cow 1 + 1
quote cow 1 + 1
a = cow 1 + 1
a
a + 1
a <- 3
a = cow 1 + 1
a
a = cow 1 + 1
a
a = cow 1 + 1
a
a = cow 1 + 1
a
Str.split("./fx/README", "/")
op = ?
op <- 1
op
type(op)
?0x4c21af5a1f0
Str.split("/plop/hop/", "/")
Str.split("/1/2/3/", "/")
List.join(Str.split("/1/2/3/", "/"), "/")
HTTP.mime_type(".txt")
HTTP.mime_type("plop.txt")
HTTP.mime_type("txt")
HTTP.mime_type_load("httpd/fx/config/mime.types")
HTTP.mime_type("txt")
HTTP.mime_type(".txt")
HTTP.mime_type("pplop.txt")
HTTP.mime_type("txt")
File.ext("Plop.html")
HTTP.mime_type(File.ext("Plop.html"))
(Str) HTTP.mime_type(File.ext("Plop.html"))
Str.split((Str) HTTP.mime_type(File.ext("Plop.html")), "/")
List.to_tuple(Str.split((Str) HTTP.mime_type(File.ext("Plop.html")), "/"))
(Tuple) (Str.split((Str) HTTP.mime_type(File.ext("Plop.html")), "/"))
(Str.split((Str) HTTP.mime_type(File.ext("Plop.html")), "/"))
hd(Str.split((Str) HTTP.mime_type(File.ext("Plop.html")), "/"))
List.first(Str.split((Str) HTTP.mime_type(File.ext("Plop.html")), "/"))
first(Str.split((Str) HTTP.mime_type(File.ext("Plop.html")), "/"))
(Sym) first(Str.split((Str) HTTP.mime_type(File.ext("Plop.html")), "/"))
SH.run("file -b ${SH.escape(path)}")
size = 10
if (size > 1024 * 1024 * 1024 * 1024) do                                    
if (size > 1024 * 1024 * 1024 * 1024) do
 s = size * 10 / 1024 / 1024 / 1024 / 1024
"#{s / 10}.#{s % 10}Tb"
size = 100
if (size > 1024) do
s = size * 10 / 1024
"#{s / 10}.#{s % 10}Kb"
quote %
10 % 3
human_size(1024)
human_size(1025)
human_size(1024)
human_size(2024024)
human_size(100)
Str.size("abc")
human_size(0)
human_size((Uw) 114)
type(1024 * 1024 * 1024 * 1024)
human_size((Uw) 114)
system(["ls", "-l"])
puts(system(["ls", "-l"]))
puts(system(["ls", "-l"])
)
1 +
2
1 + 2
1 + 100000000000000000000000000000000000000000000
1 + 100000000000000000000000000000000000000000000.
1 + 10000000000000000000000000000000000000000000.
1 + 10000000000000000000000000000000000000000000
1 + 10000000000000.0
1 + 10000000000000/2
1 + 10000000000000/3
1 + 2/3
3 **** 4
def op = %KC3.Operator{sym: :****, symbol_value: fn (a, b) { a * b * 4 }}
3 **** 4
3 * 4 * 4
Sh.escape("abc")
Sh.escape("abc;")
puts(Sh.escape("abc;"))
puts(Sh.escape("abc"))
puts(Sh.escape("ab c"))
puts(Sh.escape("ab(c"))
puts(Sh.escape("abc"))

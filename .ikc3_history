points[1]
points[2]
"#{(F128) 0.0}"
"#{(F128) 0.1}"
List.map([1, 2, 3], fn (x) { x * 8 })
1 + 1
1 + 1000000000000000000000000000000000000000000000000000000000
type(1 + 1000000000000000000000000000000000000000000000000)
type(1 + 1)
type(255)
type(256)
type(255 + 1)
F128.pi
F128.cos(2 * F128.pi)
F128
type(F128)
:F128
type(:F128)
:F128 == F128
F128.cos
(F128) 0.1 + (F128) 0.1
(F128) 0.01 + (F128) 0.01
(F64) 0.01 + (F64) 0.01
(F64) 0.001 + (F64) 0.001
(F64) 0.0001 + (F64) 0.0001
(F64) 0.00001 + (F64) 0.00001
(F64) 0.000001 + (F64) 0.000001
(F64) 0.000002 + (F64) 0.000002
(F64) 0.0000002 + (F64) 0.0000002
(F64) 0.0000001 + (F64) 0.0000001
(F64) 0.000001 + (F64) 0.000003
(F64) 0.3 + (F64) 0.3
type(0.1)
0.1 + 0.1
0.01 + 0.01
1 / 3
1.0 / 3.0
1 mod 3
1/3
(F64) 1.0 / (F64) 3.0
1/3
1/3 * 2
1/3 * 2 * 3
(Integer) (1/3 * 2 * 3)
type((Integer) (1/3 * 2 * 3))
type((U8) (1/3 * 2 * 3))
(U8) (1/3 * 2 * 3)
"abc" + "def"
"abc#{123}" + "def"
"abc#{123 + 456}" + "def"
"abc#{(Uw) 123 + 456}" + "def"
(Uw) 123 + 456
(Uw) (123 + 456)
"abc#{(Uw) (123 + 456)}" + "def"
quote if true do %{plop: 123, hop: 456} end
pid
pid()
man getpid
t = Thread.new(fn () { puts("ok") })
quote t = Thread.new(fn () { puts("ok") })
List.count(10)
List.map(List.count(10), fn (x) { {x, x} })
List.map(List.count(10), fn (x) { %{id: x} })
s = Serialize.new()
Serialize.tag(s, 123)
s = Serialize.new()
Serialize.tag(s, 123)
s = Serialize.new()
Serialize.tag(s, 123)
Serialize.to_str(s)
'U+123'
Serialize.tag(s, 66)
Serialize.to_str(s)
Serialize.delete(s)
Gtk4.init()
w = Gtk4.Window.new()
Gtk4.Window.present(w)
Gtk4.Window.destroy(w)
w = void
Gtk4.init()
w = Gtk4.Window.new()
Gtk4.Window.present(w)
run = false
while run do Gtk4.main_context_iteration() end
run = true
Gtk4.init()
w = Gtk4.Window.new()
Gtk4.Window.present(w)
Gtk4.main()
ncpu
100000000000000000000000000000000000 + 200000000000000000000000000000000
type(100000000000000000000000000000000000)
type(10)
git log | grep jeremy
9 +i 2
9 +i 2 + 3
9 +i 2 + 3 +i 5
Parse.tag("%Time{}")
Parse.tag("%Time{tv_sec: 1, tv_nsec: 2}")

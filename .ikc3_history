ptr = Facts.Cursor.next(cursor)
s = ?
p = ?
o = ?
cursor = Facts.with_tags(Facts.env_facts(), s, p, o)
ptr = Facts.Cursor.next(cursor)
Fact.from_ptr(ptr)
tuple = {?, ?, ?}
cursor = Facts.with_tuple(Facts.env_facts(), tuple)
ptr = Facts.Cursor.next(cursor)
tuple = {?, ?, ?}
cursor = Facts.with_tuple(Facts.env_facts(), tuple)
while (ptr = Facts.Cursor.next(cursor)) do
  f = Fact.from_ptr(ptr)
  puts((Tag) f.subject)
  puts((Tag) f.predicate)
  puts((Tag) f.object)
end
Facts.with_tags(Facts.env_facts(), ?, ?, ?, fn (fact) { puts(fact) })
Facts.with_tags(Facts.env_facts(), ?, ?, ?, fn (fact) { puts(fact); void })
Facts.with_tags(Facts.env_facts(), KC3, ?, ?, fn (fact) { puts(fact); void })
Facts.with_tags(Facts.env_facts(), KC3, :operator, ?, fn (fact) { puts(fact); void })
Facts.with_tags(Facts.env_facts(), KC3, :operator, ?, fn (fact) { puts(fact.object); void })
Facts.with(Facts.env_facts(), [[KC3, :operator, ?]], fn (fact) { puts(fact.object); void })
Facts.with(Facts.env_facts(), [[KC3, ?, ?]], fn (fact) { puts(fact.object); void })
Facts.with(Facts.env_facts(), [[KC3, :load_time, ?]], fn (fact) { puts(fact.object); void })
Facts.with(Facts.env_facts(), [[?, :load_time, ?]], fn (fact) { puts(fact.object); void })
Facts.with(Facts.env_facts(), [[KC3, :operator, ?]], fn (fact) { puts(fact.object); void })
quote operator_eq(a, b)
Facts.with(Facts.env_facts(), [[KC3, :symbol_value, ?]], fn (fact) { puts(fact.object); void })
Facts.with(Facts.env_facts(), [[?, :symbol_value, ?]], fn (fact) { puts("#{fact.subject} = #{fact.object}"); void })
Facts.with(Facts.env_facts(), [[?, :symbol_value, ?]], fn (fact) { puts(fact.subject); puts(fact.object); void })
Facts.with(Facts.env_facts(), [[?, :symbol_value, object = ?], [object, ], fn (fact) { puts(fact.subject); puts(fact.object); void })
Facts.with(Facts.env_facts(), [[KC3, :operator, ?]], fn (fact) { puts(fact.object); void })
quote if true do if false do %KC3.Operator{} end end
if true do if true do %KC3.Operator{} end end
1 + 100000000000000000000000000000
1 +i 1
1 / 2
1/2
1.0 / 2
1.0 / 2 + 1/2
1.0 / 2 + 0.5
Facts.with(Facts.env_facts(), [[KC3, :operator, ?]], fn (fact) { puts(fact.object); void })
Facts.with(Facts.env_facts(), [[?, :operator, ?]], fn (fact) { puts(fact.subject); puts(fact.object); void })
Facts.with(Facts.env_facts(), [[plop, :operator, op], [op, :symbol_value, value]], fn (fact) { puts(value); void })
Facts.with(Facts.env_facts(), quote [[plop, :operator, op], [op, :symbol_value, value]], fn (fact) { puts(value); void })
a = ?
b = ?
c = ?
Facts.with_tags(Facts.env_facts(), a, b, c, fn (fact) { puts(a); puts(b); puts(c); void })
a = ?
b = ?
c = ?
Facts.with_tags(Facts.env_facts(), a, b, c, fn (fact) { puts(a); puts(b); puts(c); void })
a = ?
b = ?
c = ?
Facts.with_tags(Facts.env_facts(), a, b, c, fn (fact) { puts(a); puts(b); puts(c); void })
a = ?
b = ?
c = ?
Facts.with_tags(Facts.env_facts(), a, b, c, fn (fact) { puts(a); puts(b); puts(c); void })
a
a <- 1
type(a)
(Ptr) a
a = ?
type(a)
(Ptr) a
a = ?
b = ?
c = ?
Facts.with_tags(Facts.env_facts(), a, b, c, fn (fact) { puts(a); puts(b); puts(c); void })
a <- 1
a = ?
a <- 1
a = ?
a <- 1
a
(Ptr) a
a <- 1
a <- 2
type(a)
a = ?
a <- 1
a
a = ?
a <- 1
a
a = ?
a <- 1
a = ?
a <- 1
a
a = ?
b = ?
c = ?
Facts.with_tags(Facts.env_facts(), a, b, c, fn (fact) { puts(a); puts(b); puts(c); void })

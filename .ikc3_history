type(1 + 100000000000000000000000000000000000000000000000000000000)
type(1 + 1)
type(255)
type(256)
type(1)
type(1 + 256)
1 + 256
(U8) 256
(U8) 257
(U16) 1
(Str) 1
(Str) 100000000000000000000000000000000000000000000000000000000
(Str) 100000
(Str) %{a: 1, b: 2}
puts(inspect(%{a: 1, b: 2}))
puts(inspect(quote if true do 1 else %{a: 1, b: 2} end))
puts(quote if true do 1 else %{a: 1, b: 2} end)
quote 1 + 1
type(quote 1 + 1)
type(quote plop(1 + 1))
type(quote quote plop(1 + 1))
def eval = macro (args) { args }
eval(quote 1 + 1)
eval(1 + 1)
def eval = macro (args) { unquote(args) }
eval(1 + 1)
def eval = macro (args) { args }
eval(1 + 1)
eval(quote 1 + 1)
a = %KC3.Operator{sym: :****, symbol_value: fn (a, b) { (a + b) * 4 }}
def op_muul = %KC3.Operator{sym: :****, symbol_value: fn (a, b) { (a + b) * 4 }}
3 **** 4
3 //// 4
def op_muul = %KC3.Operator{sym: :////, symbol_value: fn (a, b) { (a - b) * 4 }}
3 //// 4
{a, b, c} = {1, 2, 3}
%{a: a, b: b, c: c} = %{a: 1, b: 2, c: 3}
a
b
c
Compare.str_case_insensitive("Range", "range")
!Compare.str_case_insensitive("Range", "range")
! Compare.str_case_insensitive("Range", "range")
! 0
quit
q
exit
exit(Ã)
exit()
Map.put(%{}, :a, 1)
Struct.put(%KC3.Operator{}, :sym, :plop)
type(%KC3.Operator{})
Struct.put(%KC3.Operator{}, :sym, :plop)
Crypt.hash_password("Plop")
hash = Crypt.hash_password("Plop")
Crypt.check_password("Plop", hash)
Crypt.check_password("plop", hash)
hash = Crypt.hash_password("Plop")
Crypt.check_password("plop", hash)
hash = Crypt.hash_password("Plop")
Crypt.check_password("plop", hash)
Crypt.check_password("Plop", hash)
Crypt.sha512("Plop", "$6$rounds=12345$")
Crypt.sha512("Plop", "$6$rounds=12345$abcde")
Crypt.sha512("Plop", "$6$rounds=12345$abcd")
Crypt.sha512("Plop", "$6$rounds=12345$abc0123456789$")
Crypt.sha512("Plop", "$6$rounds=1234$abc0123456789$")
Crypt.sha512("Plop", "$6$")
152 - 37
Crypt.sha512("Plop", "$6$")
Crypt.sha512("Plop", "$6$rounds=1234$abc0123456789$")
hash = Crypt.sha512("Plop", "$6$rounds=1234$abc0123456789$")
hash2 = Crypt.sha512("Plop", hash)
hash == hash2
hash = Crypt.sha512("Plop", "$6$rounds=1234$abc0123456789$")
h2 = Crypt.sha512("Plop", hash)
h2 = Crypt.sha512("Plop2", hash)
Crypt.sha512_hash_password("Plop")
Str.random_base64(1)
Str.random_base64(2)
Str.size(Str.random_base64(2))
Str.size(Str.random_base64(1))
Crypt.sha512_hash_password("Plop")
Str.random_base64(64)
Crypt.sha512_hash_password("Plop")
Crypt.sha512("Plop", "$6$rounds=1234567$abc0123456789$")
Crypt.sha512("Plop", "$6$rounds=123456$abc0123456789$")
Crypt.sha512_hash_password("Plop")
quote if trrue
quote if true do if false do 1 else %KC3.Operator{sym: :-, symbol_value: 3} end end
Crypt.sha512("Plop", "$6$rounds=123456$abc0123456789$")
1 + 1
1 + 10000000000000000000000000000000000000000000
Time.from_str("1970-01-01 00:00:00")
Time.from_str("2024-10-31 23:00:00")
Time.to_str(Time.from_str("2024-10-31 23:00:00"))
List.map([1, 2, 3], fn (x) { x * 2 })
Facts.collect_with(Facts.env_db(), [[op = ?, :is_a, :operator]], fn (fact) { op })
1 + 1

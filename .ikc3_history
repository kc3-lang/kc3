?0x4c21af5a1f0
Str.split("/plop/hop/", "/")
Str.split("/1/2/3/", "/")
List.join(Str.split("/1/2/3/", "/"), "/")
HTTP.mime_type(".txt")
HTTP.mime_type("plop.txt")
HTTP.mime_type("txt")
HTTP.mime_type_load("httpd/fx/config/mime.types")
HTTP.mime_type("txt")
HTTP.mime_type(".txt")
HTTP.mime_type("pplop.txt")
HTTP.mime_type("txt")
File.ext("Plop.html")
HTTP.mime_type(File.ext("Plop.html"))
(Str) HTTP.mime_type(File.ext("Plop.html"))
Str.split((Str) HTTP.mime_type(File.ext("Plop.html")), "/")
List.to_tuple(Str.split((Str) HTTP.mime_type(File.ext("Plop.html")), "/"))
(Tuple) (Str.split((Str) HTTP.mime_type(File.ext("Plop.html")), "/"))
(Str.split((Str) HTTP.mime_type(File.ext("Plop.html")), "/"))
hd(Str.split((Str) HTTP.mime_type(File.ext("Plop.html")), "/"))
List.first(Str.split((Str) HTTP.mime_type(File.ext("Plop.html")), "/"))
first(Str.split((Str) HTTP.mime_type(File.ext("Plop.html")), "/"))
(Sym) first(Str.split((Str) HTTP.mime_type(File.ext("Plop.html")), "/"))
SH.run("file -b ${SH.escape(path)}")
size = 10
if (size > 1024 * 1024 * 1024 * 1024) do                                    
if (size > 1024 * 1024 * 1024 * 1024) do
 s = size * 10 / 1024 / 1024 / 1024 / 1024
"#{s / 10}.#{s % 10}Tb"
size = 100
if (size > 1024) do
s = size * 10 / 1024
"#{s / 10}.#{s % 10}Kb"
quote %
10 % 3
human_size(1024)
human_size(1025)
human_size(1024)
human_size(2024024)
human_size(100)
Str.size("abc")
human_size(0)
human_size((Uw) 114)
type(1024 * 1024 * 1024 * 1024)
human_size((Uw) 114)
system(["ls", "-l"])
puts(system(["ls", "-l"]))
puts(system(["ls", "-l"])
)
1 +
2
1 + 2
1 + 100000000000000000000000000000000000000000000
1 + 100000000000000000000000000000000000000000000.
1 + 10000000000000000000000000000000000000000000.
1 + 10000000000000000000000000000000000000000000
1 + 10000000000000.0
1 + 10000000000000/2
1 + 10000000000000/3
1 + 2/3
3 **** 4
def op = %KC3.Operator{sym: :****, symbol_value: fn (a, b) { a * b * 4 }}
3 **** 4
3 * 4 * 4
Sh.escape("abc")
Sh.escape("abc;")
puts(Sh.escape("abc;"))
puts(Sh.escape("abc"))
puts(Sh.escape("ab c"))
puts(Sh.escape("ab(c"))
puts(Sh.escape("abc"))
1 + 1
1 + 10000000000000000000000000000000000000000000000000
2 * 10000000000000000000000000000000000000000000000000
type(10000000000000000000000000000000000000000000000000)
type(1)
type(255)
type(256)
quote fn (x) { x * x }
quote if true do if false do 1 else fn (x) { x * x } end end
quote if true do if false do 1 else fn (x) do x * x end end end
quote if true do if false do %KC3.Operator{sym: :-, symbol_value: 3} else fn (x) do x * x end end end
if true do if true do %KC3.Operator{sym: :-, symbol_value: 3} else fn (x) do x * x end end end
type(0)
type(-1)
def operator_muul = %KC3.Operator{sym: :****, symbol_value: fn (a, b) { a * a + b * b }
}
3 **** 5
3 * 3 + 5 * 5
system(["ls", "-l"])
tem(["ls", "-l"])
human_size(2024024)
to_lisp
to_lisp(quote 1 + 1)
to_lisp(quote 1 + 1 * 2 / 3 - 4)
to_lisp(quote a = ?; a <- 1; a)
Facts.database()
a = Facts.database()
(Facts) a

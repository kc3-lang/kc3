128 * 128
256 * 256 - 1
type(256 * 256 - 1)
type(-256 * 256 - 1)
type(-256 * 256 + 1)
-256 * 256 + 1
type(-65536 * 65536 + 1)
type(-65536 * 65536 - 1)
type(-65536 * 65536 + 1)
-256 * 256 + 1
type(-256 * 256 + 1)
type(-256 * 256 / 8 + 1)
type(-256 * 256 / 2 + 1)
type(-256 * 128 + 1)
type(-256 * 128 + 2)
type(-256 * 256 / 2 + 1)
type(-128 * 128 / 2 + 1)
type(-255 * 256 / 2 + 1)
type(-255 * 256 + 1)
-255 * 256 + 1
-255 * 256
-256 * 256 / 2
-256 * 256 / 2 + 1
type(-32767)
type(-256 * 256 / 2 + 1)
-32767
type(-32767)
(S16) -32767
i = type(-32767)
-32768 * 65536
-32768 * 65536 + 1
-2147483648 * 65536 * 65536 + 1
q
%KC3.Operator{}
%KC3.Operator{sym: :-}
op = %KC3.Operator{sym: :-}
op.sym
op = %{id: 1, sym: :-}
op.id
type(op.id)
type(op.sym)
(Str) op.sym
[fd: (S32) -1]
load("https://git.kmx.io/kc3-lang/kc3/
)
load("lib/kc3/0.1/s32.facts")
(S32) 1
(S32) -1
[fd: (S32) -1]
defmodule Socket do defstruct [fd: (S32) -1]; end
defmodule Socket do
dlopen("lib/kc3/0.1/http.so")
def connect = cfn Socket.Buf "socket_buf_init_connect" (Result, Str, Str)
end
22
server = Socket.listen("192.168.1.50
2
server = Socket.listen("192.168.2.50", "58000")
server_client = Socket.Buf.accept(server)
req = HTTP.Request.buf_parse(server_client.buf_rw.r)
%HTTP.Response{}
Struct.offset(%HTTP.Response{}, :message)
Sym.type_size(Str)
Struct.offset(%HTTP.Response{}, :message)
res = %HTTP.Response{}
res.message
Sym.type_size(Str)
Sym.type_size(HTTP.Response)
Struct.offset(%HTTP.Response{}, :message)
Sym.type_size(Str)
Struct.offset(%HTTP.Response{}, :code)
Struct.offset(%HTTP.Response{}, :message)
Struct.offset(%HTTP.Response{}, :response)
Struct.offset(%HTTP.Response{}, :protocol)
Struct.offset(%HTTP.Response{}, :code)
Struct.offset(%HTTP.Response{}, :message)
Struct.offset(%HTTP.Response{}, :headers)
Struct.offset(%HTTP.Response{}, :body)
Struct.offset(%HTTP.Response{}, :message)
Struct.offset(%HTTP.Response{}, :protocol)
Struct.offset(%HTTP.Response{}, :code)
Struct.offset(%HTTP.Response{}, :message)
Struct.offset(%HTTP.Response{}, :headers)
Struct.offset(%HTTP.Response{}, :body)
Struct.offset(%HTTP.Request{}, :method)
Struct.offset(%HTTP.Request{}, :url)
Struct.offset(%HTTP.Request{}, :protocol)
Struct.offset(%HTTP.Request{}, :headers)
Struct.offset(%HTTP.Response{}, :message)
Struct.offset(%HTTP.Request{}, :method)
Struct.offset(%HTTP.Request{}, :url)
Struct.offset(%HTTP.Request{}, :protocol)
Struct.offset(%HTTP.Request{}, :headers)
Struct.offset(%HTTP.Response{}, :protocol)
Struct.offset(%HTTP.Response{}, :code)
Struct.offset(%HTTP.Response{}, :message)
Struct.offset(%HTTP.Response{}, :headers)
Struct.offset(%HTTP.Response{}, :body)

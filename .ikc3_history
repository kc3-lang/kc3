exit(Ã)
exit()
Map.put(%{}, :a, 1)
Struct.put(%KC3.Operator{}, :sym, :plop)
type(%KC3.Operator{})
Struct.put(%KC3.Operator{}, :sym, :plop)
Crypt.hash_password("Plop")
hash = Crypt.hash_password("Plop")
Crypt.check_password("Plop", hash)
Crypt.check_password("plop", hash)
hash = Crypt.hash_password("Plop")
Crypt.check_password("plop", hash)
hash = Crypt.hash_password("Plop")
Crypt.check_password("plop", hash)
Crypt.check_password("Plop", hash)
Crypt.sha512("Plop", "$6$rounds=12345$")
Crypt.sha512("Plop", "$6$rounds=12345$abcde")
Crypt.sha512("Plop", "$6$rounds=12345$abcd")
Crypt.sha512("Plop", "$6$rounds=12345$abc0123456789$")
Crypt.sha512("Plop", "$6$rounds=1234$abc0123456789$")
Crypt.sha512("Plop", "$6$")
152 - 37
Crypt.sha512("Plop", "$6$")
Crypt.sha512("Plop", "$6$rounds=1234$abc0123456789$")
hash = Crypt.sha512("Plop", "$6$rounds=1234$abc0123456789$")
hash2 = Crypt.sha512("Plop", hash)
hash == hash2
hash = Crypt.sha512("Plop", "$6$rounds=1234$abc0123456789$")
h2 = Crypt.sha512("Plop", hash)
h2 = Crypt.sha512("Plop2", hash)
Crypt.sha512_hash_password("Plop")
Str.random_base64(1)
Str.random_base64(2)
Str.size(Str.random_base64(2))
Str.size(Str.random_base64(1))
Crypt.sha512_hash_password("Plop")
Str.random_base64(64)
Crypt.sha512_hash_password("Plop")
Crypt.sha512("Plop", "$6$rounds=1234567$abc0123456789$")
Crypt.sha512("Plop", "$6$rounds=123456$abc0123456789$")
Crypt.sha512_hash_password("Plop")
quote if trrue
quote if true do if false do 1 else %KC3.Operator{sym: :-, symbol_value: 3} end end
Crypt.sha512("Plop", "$6$rounds=123456$abc0123456789$")
1 + 1
1 + 10000000000000000000000000000000000000000000
Time.from_str("1970-01-01 00:00:00")
Time.from_str("2024-10-31 23:00:00")
Time.to_str(Time.from_str("2024-10-31 23:00:00"))
List.map([1, 2, 3], fn (x) { x * 2 })
Facts.collect_with(Facts.env_db(), [[op = ?, :is_a, :operator]], fn (fact) { op })
1 + 1
123
type(123)
type(1234)
type(12345)
type(123456)
type(123456789)
type(123456789012)
type(1234567890123456789)
type(123456789012345678901234)
type(123456789012345678901234/2)
123456789012345678901234/2
123456789012345678901234/2 * 0.1
(123456789012345678901234/2) * 0.1
(F128) 123456789012345678901234/2 * 0.1
List.to_array
0 - 2
Tuple[]
type(Tuple[])
type((Tuple[]) {{1, 2, 3}})
type((Tuple[]) {1, 2, 3})
[1][0]
([1])[0]
access([1, 2, 3], 2)
access([1, 2, 3], [2])
access([1, 2, 3], [0])
access([1, 2, 3], [1])
access([1, 2, 3], [2])
access([1, 2, 3], [3])
a = [1, 2, 3]
a[0]
a[1]
a[2]
a[3]
points = [{(F128) 0, (F128) 1}, {(F128) 0.5, (F128) 0.6}]
points[0]
points[1]
points[2]
points[3]
points
points = [{(F128) 0, (F128) 1}, {(F128) 0.5, (F128) 0.6}]
points
points[3]
points[0]
points[1]
points[2]
"#{(F128) 0.0}"
"#{(F128) 0.1}"


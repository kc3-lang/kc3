server = Socket.listen("192.168.2.50", "58000")
server_client = Socket.Buf.accept(server)
req = HTTP.Request.buf_parse(server_client.buf_rw.r)
%HTTP.Response{}
Struct.offset(%HTTP.Response{}, :message)
Sym.type_size(Str)
Struct.offset(%HTTP.Response{}, :message)
res = %HTTP.Response{}
res.message
Sym.type_size(Str)
Sym.type_size(HTTP.Response)
Struct.offset(%HTTP.Response{}, :message)
Sym.type_size(Str)
Struct.offset(%HTTP.Response{}, :code)
Struct.offset(%HTTP.Response{}, :message)
Struct.offset(%HTTP.Response{}, :response)
Struct.offset(%HTTP.Response{}, :protocol)
Struct.offset(%HTTP.Response{}, :code)
Struct.offset(%HTTP.Response{}, :message)
Struct.offset(%HTTP.Response{}, :headers)
Struct.offset(%HTTP.Response{}, :body)
Struct.offset(%HTTP.Response{}, :message)
Struct.offset(%HTTP.Response{}, :protocol)
Struct.offset(%HTTP.Response{}, :code)
Struct.offset(%HTTP.Response{}, :message)
Struct.offset(%HTTP.Response{}, :headers)
Struct.offset(%HTTP.Response{}, :body)
Struct.offset(%HTTP.Request{}, :method)
Struct.offset(%HTTP.Request{}, :url)
Struct.offset(%HTTP.Request{}, :protocol)
Struct.offset(%HTTP.Request{}, :headers)
Struct.offset(%HTTP.Response{}, :message)
Struct.offset(%HTTP.Request{}, :method)
Struct.offset(%HTTP.Request{}, :url)
Struct.offset(%HTTP.Request{}, :protocol)
Struct.offset(%HTTP.Request{}, :headers)
Struct.offset(%HTTP.Response{}, :protocol)
Struct.offset(%HTTP.Response{}, :code)
Struct.offset(%HTTP.Response{}, :message)
Struct.offset(%HTTP.Response{}, :headers)
Struct.offset(%HTTP.Response{}, :body)
"a#{a}"
quote "a#{a}"
"a#{a}"
"a#{:a}"
quote "a#{a}"
quote "a#{:a}"
quote "a"
quote "a #{:a}"
"a #{:a}"
"""a #{:a}"""
"""a #{":a"}"""
quote """a #{":a"}"""
"""a #{":a"}"""
quote "a#{a}"
quote "a#{:a}"
quote """a#{:a}"""
quote """a#{"a"}"""
quote """a#{:a}"""
quote """a #{:a}"""
quote "a #{:a}"
quote "a"
%Time{}
Facts.env_facts()
(Facts) Facts.env_facts()
Facts.with_tags(Facts.env_facts(), ?, ?, ?)
cursor = Facts.with_tags(Facts.env_facts(), ?, ?, ?)
tuple = {?, ?, ?}
cursor = Facts.with_tuple(Facts.env_facts(), tuple)
a = ?
b = ?
c = ?
s = ?
p = ?
o = ?
cursor = Facts.with_tags(Facts.env_facts(), s, p, o)
ptr = Facts.Cursor.next(cursor)
s = ?
p = ?
o = ?
cursor = Facts.with_tags(Facts.env_facts(), s, p, o)
ptr = Facts.Cursor.next(cursor)
Fact.from_ptr(ptr)
tuple = {?, ?, ?}
cursor = Facts.with_tuple(Facts.env_facts(), tuple)
ptr = Facts.Cursor.next(cursor)
tuple = {?, ?, ?}
cursor = Facts.with_tuple(Facts.env_facts(), tuple)
while (ptr = Facts.Cursor.next(cursor)) do
  f = Fact.from_ptr(ptr)
  puts((Tag) f.subject)
  puts((Tag) f.predicate)
  puts((Tag) f.object)
end
Facts.with_tags(Facts.env_facts(), ?, ?, ?, fn (fact) { puts(fact) })
Facts.with_tags(Facts.env_facts(), ?, ?, ?, fn (fact) { puts(fact); void })
Facts.with_tags(Facts.env_facts(), KC3, ?, ?, fn (fact) { puts(fact); void })
Facts.with_tags(Facts.env_facts(), KC3, :operator, ?, fn (fact) { puts(fact); void })
Facts.with_tags(Facts.env_facts(), KC3, :operator, ?, fn (fact) { puts(fact.object); void })


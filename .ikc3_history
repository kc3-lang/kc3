b(quote quote 1 + 1)
require EKC3
EKC3.parse_template_from_str("abc<%= quote %>def<% ghi")
EKC3.parse_template_str("abc<%= quote %>def<% ghi")
require EKC3
EKC3.parse_template_str("abc<%= quote %>def<% ghi")
EKC3.parse_template_str("abc<%= quote %>def<% ghi %>")
require EKC3
EKC3.parse_template_str("abc<%= quote %>def<% ghi %>")
EKC3.parse_str("abc<%= quote %>def<% ghi %>")
require EKC3
EKC3.parse_str("abc<%= quote %>def<% ghi %>")
q
require EKC3
EKC3.parse_str("abc<%= quote %>def<% ghi %>")
require EKC3
EKC3.parse_str("abc<%= quote %>def<% ghi %>")
require EKC3
EKC3.parse_str("abc<%= quote %>def<% ghi %>")
EKC3.parse_str("""abc<%= quote %>def<% 123 %>ghi<% \"plop\" %>""")
EKC3.parse_str("""abc<%= str([ %>def<%, 123, %>ghi<% ]) puts(\"plop\") %>""")
EKC3.parse_str("""abc<%= str([ %>def<% , 123, %>ghi<% ]) puts("plop") %>""")
EKC3.parse_str("""abc<%= str([ %>def<% , 123, %>ghi<% ]) %><% puts("plop") %>""")
require EKC3
EKC3.parse_str("""abc<%= str([ %>def<% , 123, %>ghi<% ]) %><% puts("plop") %>""")
def t = EKC3.parse_str("""abc<%= str([ %>def<% , 123, %>ghi<% ]) %><% puts("plop") %>""")
t
require EKC3
def t = EKC3.parse_str("""abc<%= str([ %>def<% , 123, %>ghi<% ]) %><% puts("plop") %>""")
require Env
t(Env.out_buf())
g
t
out = Buf.init_alloc(1024 * 1024)
out = Buf.init_alloc((Uw) (1024 * 1024))
Call.ident(quote 1 + 1)
require Call
Call.ident(quote 1 + 1)
Call.sym(quote 1 + 1)
out = Buf.init_alloc(1024 * 1024)
require Buf
out = Buf.init_alloc(1024 * 1024)
out = Buf.init_alloc((Uw) (1024 * 1024))
Buf.clean(out)
require Facts
Facts.with_tags(Facts.env_db(), subject = ?, predicate = ?, object = ?, fn (fact) { puts("subject=#{subject}, predicate=#{predicate}, object=#{object}") })
require Marshall
require Facts
Facts.env_db()
require EKC3
EKC3.load("www/app/templates/layout.ekc3.html")
EKC3.load("www/app/templates/layout.html.ekc3")
require EKC3
EKC3.load("www/app/templates/layout.html.ekc3")
dump("dump")
1 + 1
123
12345678900000000000000000000000000000
type(12345678900000000000000000000000000000)
1 + 1
a = 1
=
1 + 1
KC3.Op.arity(:=)
MarshallRead.new_from_file("lib/kc3/0.1/kc3.dump")
1 + 1
:+
type(:+)
type(quote 1 + 1)
type(quote (1 + 1))
1 + 1
a = 1
a
1 + 1
a = 1
pwd
1 + 1
1 + 1000000000000000000000000000000000000000000000
& 1
p = & 1
*p
* p
p = & 1
* p
p = 1
a = 1
pa = & a
b = 2
pb = & b
* pa
a
* pa
Facts.env_db
Facts.env_db()
p = & Facts.env_db()
(Facts) Facts.env_db()
(Facts*) Facts.env_db()
 Facts.env_db()
type(Facts.env_db())

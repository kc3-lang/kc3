[fd: (S32) -1]
load("https://git.kmx.io/kc3-lang/kc3/
)
load("lib/kc3/0.1/s32.facts")
(S32) 1
(S32) -1
[fd: (S32) -1]
defmodule Socket do defstruct [fd: (S32) -1]; end
defmodule Socket do
dlopen("lib/kc3/0.1/http.so")
def connect = cfn Socket.Buf "socket_buf_init_connect" (Result, Str, Str)
end
22
server = Socket.listen("192.168.1.50
2
server = Socket.listen("192.168.2.50", "58000")
server_client = Socket.Buf.accept(server)
req = HTTP.Request.buf_parse(server_client.buf_rw.r)
%HTTP.Response{}
Struct.offset(%HTTP.Response{}, :message)
Sym.type_size(Str)
Struct.offset(%HTTP.Response{}, :message)
res = %HTTP.Response{}
res.message
Sym.type_size(Str)
Sym.type_size(HTTP.Response)
Struct.offset(%HTTP.Response{}, :message)
Sym.type_size(Str)
Struct.offset(%HTTP.Response{}, :code)
Struct.offset(%HTTP.Response{}, :message)
Struct.offset(%HTTP.Response{}, :response)
Struct.offset(%HTTP.Response{}, :protocol)
Struct.offset(%HTTP.Response{}, :code)
Struct.offset(%HTTP.Response{}, :message)
Struct.offset(%HTTP.Response{}, :headers)
Struct.offset(%HTTP.Response{}, :body)
Struct.offset(%HTTP.Response{}, :message)
Struct.offset(%HTTP.Response{}, :protocol)
Struct.offset(%HTTP.Response{}, :code)
Struct.offset(%HTTP.Response{}, :message)
Struct.offset(%HTTP.Response{}, :headers)
Struct.offset(%HTTP.Response{}, :body)
Struct.offset(%HTTP.Request{}, :method)
Struct.offset(%HTTP.Request{}, :url)
Struct.offset(%HTTP.Request{}, :protocol)
Struct.offset(%HTTP.Request{}, :headers)
Struct.offset(%HTTP.Response{}, :message)
Struct.offset(%HTTP.Request{}, :method)
Struct.offset(%HTTP.Request{}, :url)
Struct.offset(%HTTP.Request{}, :protocol)
Struct.offset(%HTTP.Request{}, :headers)
Struct.offset(%HTTP.Response{}, :protocol)
Struct.offset(%HTTP.Response{}, :code)
Struct.offset(%HTTP.Response{}, :message)
Struct.offset(%HTTP.Response{}, :headers)
Struct.offset(%HTTP.Response{}, :body)
"a#{a}"
quote "a#{a}"
"a#{a}"
"a#{:a}"
quote "a#{:a}"
quote "a#{%KC3.Operator{}}"
quote "a#{%KC3.Operator{sym: :-}}"
type(18446744073709551615)
18446744073709551615
type(4294967296)
type( -2147483648)
type(4294967296)
type(-9223372036854775808)
File.exists?("env")
File.exists?("env4")
File.exists?("lib/kc3/0.1/file.kc3")
File.stat("env")
File.stat("env").st_mode
def is_directory? = fn (path) { List.has(File.stat(path).st_mode, :directory) }
File.stat("libkc3").st_mode
List.has
def is_directory? = fn (path) { List.has(File.stat(path).st_mode, :directory) }
List.has
List.has?
is_directory?("env")
def is_directory? = fn (path) { List.has?(File.stat(path).st_mode, :directory) }
is_directory?("env")
is_directory?("libkc3")
def is_directory? = fn (path) { List.has?(File.stat(path).st_mode, :directory) }
File.is_directory?("env")
File.is_directory?("libkc3")
File.is_directory?("plop1234")
File.is_directory?("env")
File.list(lib)
File.list("lib")
File.list("lib/kc3")
File.list("lib/kc3/0.1")
Str.starts_with?("abc", "a")
Str.starts_with?("abc", "b")
Str.ends_with?("abc", "b")
Str.ends_with?("abc", "c")
Str.ends_with?("abc/", "/")
File.read("env")

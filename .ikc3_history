type(test.id)
type(t.id)
defmodule Test do
  defstruct [hello: "World !",
             id: (S64) 123]
end
t
type(t.id)
t = %Test{}
type(t.id)
1
1 + 1
+
defmodule
KC3.Op
do
defstruct [sym: :+, callable: (Callable) ?]
end
s = Socket.listen("localhost", "15004")
s
Socket.close(s)
s = Socket.listen("localhost", "15004")
(Bool) s
type(s)
void = ?
a = ?
void = a
void = ^a
void = ^ a
a = ?
void = ^ a
a
void = (a)
a
a = ?
a
void = (a)
a
^ 1
^
type(^)
while a do
  a = false
end
a = 42
i = 0
while i < 10 do
i = 0
while i < 10 do
i = 0
while i < 10 do puts(i); i = i + 1 end
while i < 10 do puts("i = #{i}"); i = i + 1 end
let 
%{}
do
123
end
Str("a", "b", "c")
str("a", "b", "c")
str(["a", "b", "c"])
special_operator_arity
special_operator_arity(quote +)
special_operator_arity(quote while)
str(["a", "b", "c"])
special_operator_arity(quote while)
i = 0; while i < 10 do puts("i = #{i}"); i = i + 1 end
i = 0 ; while i < 10 do puts("i = #{i}"); i = i + 1 end
i = 0 ; while i < 10 do puts("i = #{i}"); (i = i + 1) end
i = 0
while (i < 3) do
puts(i)
i = i + 1
end
git st
i = 0(
while i < 3 do
end
i < 3
while (i < 3) do
i = i + 1
puts(i)
:ok
end
i = 0
i < 3 do
endd
end
while i < 3 do
while (i) < 3 do
while i < 3 do
while i < 3 {
while i < 3 {end
end
}
end
}
end
while i < 3 do
i = 0 ; while i < 5 do puts("i = #{i}") ; i = i + 1 ; :ok end

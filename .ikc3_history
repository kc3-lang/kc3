a <- 1
a = ?
a <- 1
a
a = ?
b = ?
c = ?
Facts.with_tags(Facts.env_facts(), a, b, c, fn (fact) { puts(a); puts(b); puts(c); void })
Facts.with(Facts.env_facts(), quote [[plop, :operator, op], [op, :symbol_value, value]], fn (fact) { puts(value); void })
Facts.with(Facts.env_facts(), [[plop = ?, :operator, op = ?], [op, :symbol_value, value = ?]], fn (fact) { puts(value); void })
Facts.with(Facts.env_facts(), quote [[plop, :operator, op], [op, :symbol_value, value]], fn (fact) { puts(value); void })
Facts.with(Facts.env_facts(), quote [[KC3, :operator, op], [op, :symbol_value, value]], fn (fact) { puts(value); void })
Facts.with(Facts.env_facts(), quote [[KC3, :operator, op]], fn (fact) { puts(op); void })
Facts.with(Facts.env_facts(), [[KC3, :operator, op]], fn (fact) { puts(op); void })
Facts.with(Facts.env_facts(), quote [[KC3, :operator, op]], fn (fact) { puts(op); void })
Facts.with(Facts.env_facts(), quote [KC3, :operator, op], fn (fact) { puts(op); void })
Facts.with(Facts.env_facts(), quote [[KC3, :operator, op = ?]], fn (fact) { puts(op); void })
op = ?; Facts.with(Facts.env_facts(), [[KC3, :operator, op]], fn (fact) { puts(op); void })
op = ? ; Facts.with(Facts.env_facts(), [[KC3, :operator, op]], fn (fact) { puts(op); void })
op = ?
Facts.with(Facts.env_facts(), [[KC3, :operator, op]], fn (fact) { puts(op); void })
op = ?
Facts.with(Facts.env_facts(), [[KC3, :operator, op]], fn (fact) { puts(op); void })
Facts.with_tags(Facts.env_facts(), KC3, :operator, op, fn (fact) { puts(op); void })
1 + 10000000000000000000000000

1 + 1
quote 1 + 1
List.map([1, 2, 3], fn (x) { x * 2 })
a = ?
b = ?
c = ?
Facts.with_tags(Facts.env_facts(), KC3, :operator, a, fn (fact) { puts(a); void })
quote if true do if true do %KC3.Operator{} end end
quote if true do if true do unquote(%KC3.Operator{}) end end
Facts.with(Facts.env_facts(), [[KC3, :operator, op], [op, :symbol_value, value], fn (fact) { puts(op); void })
Facts.with(Facts.env_facts(), quote [[KC3, :operator, op], [op, :symbol_value, value], fn (fact) { puts(op); void })
Facts.with(Facts.env_facts(), quote [[KC3, :operator, op], [op, :symbol_value, value]], fn (fact) { puts(op); void })
Facts.with(Facts.env_facts(), quote [[KC3, :operator, op], [op, :symbol_value, value]], fn (fact) { puts(op); 1 })
Facts.with(Facts.env_facts(), quote [[KC3, :operator, op], [^ op, :symbol_value, value]], fn (fact) { puts(op); 1 })
Facts.with(Facts.env_facts(), quote [[KC3, :operator, ^ op], [^ op, :symbol_value, value]], fn (fact) { puts(op); 1 })
op = ?
Facts.with(Facts.env_facts(), quote [[KC3, :operator, ^ op], [^ op, :symbol_value, value]], fn (fact) { puts(op); 1 })
op = ?
Facts.with(Facts.env_facts(), quote [[KC3, :operator, ^ op], [^ op, :symbol_value, value]], fn (fact) { puts(op); 1 })
op = ?
Facts.with(Facts.env_facts(), quote [[KC3, :operator, ^ op], [^ op, :symbol_value, value]], fn (fact) { puts(op); 1 })
op = ?
op <- 1
op
op <- ?
Facts.with(Facts.env_facts(), quote [[KC3, :operator, ^ op], [^ op, :symbol_value, value]], fn (fact) { puts(op); 1 })
Facts.with(Facts.env_facts(), quote [[KC3, :operator, op], [^ op, :symbol_value, value]], fn (fact) { puts(op); 1 })
Facts.with(Facts.env_facts(), quote [[KC3, :operator, op], [op, :symbol_value, value]], fn (fact) { puts(op); 1 })
Facts.with(Facts.env_facts(), quote [[KC3, :operator, unquote(op)], [unquote(op), :symbol_value, value]], fn (fact) { puts(op); 1 })
op = ?
Facts.with(Facts.env_facts(), quote [[KC3, :operator, unquote(op)], [unquote(op), :symbol_value, value]], fn (fact) { puts(op); 1 })
op
Facts.with(Facts.env_facts(), quote [[KC3, :operator, op = ?], [op, :symbol_value, value]], fn (fact) { puts(op); 1 })
Facts.with(Facts.env_facts(), quote [[KC3, :operator, op], [^ op, :symbol_value, value]], fn (fact) { puts(op); 1 })
Facts.with(Facts.env_facts(), quote [[KC3, :operator, op]], fn (fact) { puts(op); 1 })
Facts.with_tags(Facts.env_facts(), KC3, :operator, ?, fn (fact) { puts(fact.object); 1 })
?
a = ?
?
a
a = ?
a
a = ?
a
a <- 1
a
(U8) (Ptr) a
(Tag) (Ptr) a
(Ptr) a
(Tag) (Ptr) a
a = ?
a
(Ptr) a
a = ?
a
a <- 1
a
(Ptr) 0x1801350e830
(Tag) (Ptr) 0x1801350e830
Facts.with_tags(Facts.env_facts(), KC3, :operator, ?, fn (fact) { puts(fact.object); 1 })
Facts.with(Facts.env_facts(), [[KC3, :operator, ?]], fn (fact) { puts(fact.object); 1 })
(Ptr) 0xf24fc9ce000
(Tag) (Ptr) 0xf24fc9ce000
?
Facts.with_tags(Facts.env_facts(), KC3, :operator, ?, fn (fact) { puts(fact.object); 1 })
Facts.with(Facts.env_facts(), [[KC3, :operator, ?]], fn (fact) { puts(fact.object); 1 })
Facts.with(Facts.env_facts(), quote [[KC3, :operator, op]], fn (fact) { puts(fact.object); 1 })
op
op = ?
Facts.with(Facts.env_facts(), quote [[KC3, :operator, op]], fn (fact) { puts(fact.object); 1 })
op
Facts.with(Facts.env_facts(), quote [[KC3, :operator, op]], fn (fact) { puts(fact.object); 1 })
Facts.with(Facts.env_facts(), quote [[KC3, :operator, op = (Ident) ?]], fn (fact) { puts(fact.object); 1 })

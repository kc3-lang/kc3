while a do
  a = false
end
a = 42
i = 0
while i < 10 do
i = 0
while i < 10 do
i = 0
while i < 10 do puts(i); i = i + 1 end
while i < 10 do puts("i = #{i}"); i = i + 1 end
let 
%{}
do
123
end
Str("a", "b", "c")
str("a", "b", "c")
str(["a", "b", "c"])
special_operator_arity
special_operator_arity(quote +)
special_operator_arity(quote while)
str(["a", "b", "c"])
special_operator_arity(quote while)
i = 0; while i < 10 do puts("i = #{i}"); i = i + 1 end
i = 0 ; while i < 10 do puts("i = #{i}"); i = i + 1 end
i = 0 ; while i < 10 do puts("i = #{i}"); (i = i + 1) end
i = 0
while (i < 3) do
puts(i)
i = i + 1
end
git st
i = 0(
while i < 3 do
end
i < 3
while (i < 3) do
i = i + 1
puts(i)
:ok
end
i = 0
i < 3 do
endd
end
while i < 3 do
while (i) < 3 do
while i < 3 do
while i < 3 {
while i < 3 {end
end
}
end
}
end
while i < 3 do
i = 0 ; while i < 5 do puts("i = #{i}") ; i = i + 1 ; :ok end
1+1
1+ 2
continue
quote continue
type(quote continue)
type(quote break)
to_lisp(quote break)
to_lisp(quote continue)
continue
c = cfn Void "kc3_continue" ()
c()
continue
to_lisp(quote continue)
type(quote continue)
unquote(quote continue)
def c = macro () { quote continue }
c()
quote (Ident) continue
type(quote (Ident) continue)
type(quote (Ident) Test.sym)
"\xFF"
Str.has_reserved_characters("\xFF")
Str.has_reserved_characters?("\xFF")
Str.has_reserved_characters?("\0")
Str.has_reserved_characters?("\xFF")
"\xFF"
(Str) (Character) 0xFF
(Character) 0xFF
(Str) 0xFF
"\xFF"
"\xFF"[0]
s = "\xFF"
s[0]
s = "abc"
s[0]
s = "abc"
Str.byte(s, 0)
(Character) 97
s = "\xFF"
Str.byte(s, 0)
%Time{tv_sec: 1 + 1, tv_nsec: 2 + 2}

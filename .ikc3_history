a = 1; 2
a = ?; 2
a
a = ?; 2
a
a = 1; 2
a
a = ?
b = (Var) 0x9ee46e3ef10
? <- 1
a = ? <- 1
a
a = ? <- 1 ; b = a
b
a
a = ? <- 1 ; 2
a
a = ? <- 1 ; 2
a
(a = ? <- 1) ; 2
a
a = ? <- 1 ; 2
a
a = ? <- 1 ; 2
a
a = ? <- 1 ; 2
a
(a = ? <- 1) ; 2
a
a = ? <- 1 ; 2
quote a = ? <- 1 ; 2
to_lisp(quote a = ? <- 1 ; 2)
operator(:";")
KC3.Operator.find(:";")
a = ?
a
a <- 1
a
a = 1
a
to_lisp(quote a = ? <- 1 ; 2)
a = ?
Facts.with_tags(Facts.env_facts(), KC3, :operator, a, fn (fact) { puts(a); 1 })
to_lisp(quote a = ? <- 1 ; 2)
to_lisp(quote a = 1 ; 2)
to_lisp(quote a = ? <- 1 ; 2)
q
exit
to_lisp(quote a = ? <- 1 ; 2)
quote if true do if true do %KC3.Operator{} end end
quote if true do if true do unquote(%KC3.Operator{}) end end
quote if true do if true do %KC3.Operator{sym: :a} end end
to_lisp(quote a = ? <- 1 ; 2)
quote if true do if true do %KC3.Operator{symbol_value: void} end end
quote if true do if true do %KC3.Operator{sym: :-, symbol_value: void} end end
to_lisp(quote a = ? <- 1 ; 2)
quote a = ? <- 1 ; 2
quote 1 + 20 / 3 * 4 - 5
quote 1 + 20 / 3 * 4
quote 1 + 20 / 3 * 4 - 5
1 + 1
1 + 1000000000000000000000000000000000000000000000000000000
(1 + 1000000000000000000000000000000000000000000000000000000) * 2
sqrt(1 + 1000000000000000000000000000000000000000000000000000000)
List.reverse([1, 2, 3, 4])
List.reverse
List.reverse([1, 2, 3, 4])
List.map([1, 2, 3, 4], fn (x) { x * 2 })
List.has?([1, 2, 3, 4], 1)
List.has?([1, 2, 3, 4], 0)
quote if true do if true do %KC3.Operator{} end end
quote if true do if true do %KC3.Operator{sym: :-} end end
quote if true do if true do %KC3.Operator{sym: :-, symbol_value: void} end end
quote if true do if true do %KC3.Operator{sym: :-, symbol_value: void} else 0 end else 1 end
a = ?
b = ?
a = ? ; void
Facts.with_tags(Facts.env_facts(), KC3, :operator, ?, fn (fact) { puts(fact.object); 1 })
EKC3.html_escape("plop <1>")
Facts.first_with_tags(Facts.env_facts(), KC3, :operator, ?, fn (fact) { fact.object })
first_operator = Facts.first_with_tags(Facts.env_facts(), KC3, :operator, ?, fn (fact) { fact.object })
first_operator
List.append([1, 2, 3], 4)
HTTPd.routes
a = :dir
file = %{type: :dir}
file.type
file.type == :dir
file = %{type: :dir, items = [%{type: file, items: []}]}
file = %{type: :dir, items: [%{type: file, items: []}]}
file = %{type: :dir, items: [%{type: :file, items: []}]}
file = "plop.md"
Str.starts_with?(file, ".") ||                                     
(Sw) 4 > 0
q
List.sort([1, 2, 3, 4])
List.sort([4, 3, 2, 1])
List.sort(["1. a", "2. bc", "3. cde", "4. fghi"])
List.sort(["1. abcd", "2. efg", "3. hi", "4. j"])

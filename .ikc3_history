op = ?
Facts.with(Facts.env_facts(), quote [[KC3, :operator, ^ op], [^ op, :symbol_value, value]], fn (fact) { puts(op); 1 })
op = ?
Facts.with(Facts.env_facts(), quote [[KC3, :operator, ^ op], [^ op, :symbol_value, value]], fn (fact) { puts(op); 1 })
op = ?
op <- 1
op
op <- ?
Facts.with(Facts.env_facts(), quote [[KC3, :operator, ^ op], [^ op, :symbol_value, value]], fn (fact) { puts(op); 1 })
Facts.with(Facts.env_facts(), quote [[KC3, :operator, op], [^ op, :symbol_value, value]], fn (fact) { puts(op); 1 })
Facts.with(Facts.env_facts(), quote [[KC3, :operator, op], [op, :symbol_value, value]], fn (fact) { puts(op); 1 })
Facts.with(Facts.env_facts(), quote [[KC3, :operator, unquote(op)], [unquote(op), :symbol_value, value]], fn (fact) { puts(op); 1 })
op = ?
Facts.with(Facts.env_facts(), quote [[KC3, :operator, unquote(op)], [unquote(op), :symbol_value, value]], fn (fact) { puts(op); 1 })
op
Facts.with(Facts.env_facts(), quote [[KC3, :operator, op = ?], [op, :symbol_value, value]], fn (fact) { puts(op); 1 })
Facts.with(Facts.env_facts(), quote [[KC3, :operator, op], [^ op, :symbol_value, value]], fn (fact) { puts(op); 1 })
Facts.with(Facts.env_facts(), quote [[KC3, :operator, op]], fn (fact) { puts(op); 1 })
Facts.with_tags(Facts.env_facts(), KC3, :operator, ?, fn (fact) { puts(fact.object); 1 })
?
a = ?
?
a
a = ?
a
a = ?
a
a <- 1
a
(U8) (Ptr) a
(Tag) (Ptr) a
(Ptr) a
(Tag) (Ptr) a
a = ?
a
(Ptr) a
a = ?
a
a <- 1
a
(Ptr) 0x1801350e830
(Tag) (Ptr) 0x1801350e830
Facts.with_tags(Facts.env_facts(), KC3, :operator, ?, fn (fact) { puts(fact.object); 1 })
Facts.with(Facts.env_facts(), [[KC3, :operator, ?]], fn (fact) { puts(fact.object); 1 })
(Ptr) 0xf24fc9ce000
(Tag) (Ptr) 0xf24fc9ce000
?
Facts.with_tags(Facts.env_facts(), KC3, :operator, ?, fn (fact) { puts(fact.object); 1 })
Facts.with(Facts.env_facts(), [[KC3, :operator, ?]], fn (fact) { puts(fact.object); 1 })
Facts.with(Facts.env_facts(), quote [[KC3, :operator, op]], fn (fact) { puts(fact.object); 1 })
op
op = ?
Facts.with(Facts.env_facts(), quote [[KC3, :operator, op]], fn (fact) { puts(fact.object); 1 })
op
Facts.with(Facts.env_facts(), quote [[KC3, :operator, op]], fn (fact) { puts(fact.object); 1 })
Facts.with(Facts.env_facts(), quote [[KC3, :operator, op = (Ident) ?]], fn (fact) { puts(fact.object); 1 })
a = ?
a <- void
a
%KC3.Operator{symbol_value: void}
%KC3.Operator{symbol_value: 1}
%KC3.Operator{symbol_value: void}
1; 2; 3
1; 2
1 ; 2
a = 1; 2
a = ?; 2
a
a = ?; 2
a
a = 1; 2
a
a = ?
b = (Var) 0x9ee46e3ef10
? <- 1
a = ? <- 1
a
a = ? <- 1 ; b = a
b
a
a = ? <- 1 ; 2
a
a = ? <- 1 ; 2
a
(a = ? <- 1) ; 2
a
a = ? <- 1 ; 2
a
a = ? <- 1 ; 2
a
a = ? <- 1 ; 2
a
(a = ? <- 1) ; 2
a
a = ? <- 1 ; 2
quote a = ? <- 1 ; 2
to_lisp(quote a = ? <- 1 ; 2)
operator(:";")
KC3.Operator.find(:";")

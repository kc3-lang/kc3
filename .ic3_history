if true then 1 else 2 end
if true 1 else 2 end
def fib = fn (x) { if x < 0 1 else fib(x - 2) + fib(x - 1) end }
fib(-1)
def fib = fn (x) { if x < 0 0 else fib(x - 2) + fib(x - 1) end }
def fib = fn (x) { if x < 0 then 0 else fib(x - 2) + fib(x - 1) end }
def fib = fn { (0) { 1 } (1) { 1 } (x) { if x < 0 then 0 else fib(x - 2) + fib(x - 1) end }}
do end
end
do end
end
do end
defmodule Plop do end
quote Plop
quote_cfn Plop
(Sym) "Abc"
defmodule Plop do end
defmodule Plop do def a = 1 end
quote_cfn Plop
defmodule Plop do def a = 1 end
Plop.a
defmodule Plop do def a = 1 end
Plop.a
Plop
defmodule Plop do def a = 1 end
Plop.a
defmodule Plop do def a = 1 end
Plop.a
defmodule Plop do defoperator :operator_add :+ cfn Tag "tag_add" (Tag, Tag, Result) 10 :left end
defmodule Plop do defoperator :operator_add :+ cfn Tag "tag_mul" (Tag, Tag, Result) 10 :left end
defmodule Plop do
  defoperator :operator_add :+ cfn Tag "tag_mul" (Tag, Tag, Result) 10 :left
  def sq = fn (x) { x + x }
end
Plop.sq(4)
defmodule Plop do defoperator :operator_add :+ cfn Tag "tag_mul" (Tag, Tag, Result) 10 :left end
defmodule Plop do
  def sq = fn (x) { x + x }
end
Plop.sq(4)
defmodule Plop do def a = 1 end
Plop.a
(Sw) 123\
(Sw) 123
(Sw) 123/2
(Sw) 123 / 2
defmodule Plop do def a = 1 end
Plop.a
defmodule Plop do def a = 2 end
Plop.a
defmodule Plop do def a = 1; def double = fn (x) { x * 2 } end
Plop.a
Plop.double
Plop.double(21)
def a = 1
a
def double = fn (x) { x * 2 }
double(42)
defmodule Tiyon do
  def a = 1
  def double = fn (x) { x * 2 }
  def double_tuple = macro (x) do {x, x} end
  def double_list = macro (x) do [x, x] end
end
Tiyon.a
Tiyon.double(21)
Tiyon.double_tuple(21)
Tiyon.double_tuple(21 + 21)
Tiyon.double_list(21 + 21)
[42, x] = Tiyon.double_list(21 + 21)
[42, x] = [42, 42]
x
Tiyon.double_list(21 + 21) = [42, y]
def last = fn (x) do
  [y | _] = List.reverse(x)
  y
end
def last = fn (x) do
  [y | _] = List.reverse(x)
  y
end
def List.last = fn (x) do
  [y | _] = List.reverse(x)
  y
end
List.last([1, 2, 3, 4])
def List.last = fn (x) do
  [y | z] = List.reverse(x)
  y
end
List.last([1, 2, 3, 4])
[x, y | z] = List.reverse([1, 2, 3])
x
y
z
[x, y | z] = List.reverse([1, 2, 3, 4])
x
y
z

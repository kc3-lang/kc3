sqrt(-1) * sqrt(-1)
sqrt(-2) * sqrt(-2)
1/3 +i 1/2
1 +i 2
1/2 +i 2/3
(1/2 +i 2/3 +i 3/4) * 1/2
(1/2 +i 2/3 +i 3/4) - 1/2
1 - 1/2
1/2 - 1
1/2 - 3/4
1 - 3/4
1/2 * 3/4
2/3 * 3/4
2/3 / 3/4
1 / sqrt(2)
(1 +i 2) / 3
(10 +i 20) / 3
(10/1 +i 20/1) / 3
(1/2 +i 2/3) / 2
5 % 3
5 mod 3
15 mod 3
-15 mod 3
-15 mod -3
-15 mod -2
-15 mod -5
-15 mod -6
-15 mod 6
3 mod sqrt(2)
4 mod sqrt(2)
2 mod sqrt(2)
10 mod sqrt(2)
1/2 + 2/3
1/2 * 2/3
1/2 / 2/3
1/2 - 2/3
1 +i 2
(1 +i 2) + (2 +i 3)
(1 +i 2) * (2 +i 3)
ic3> (1 +i 2) + (2 +i 3)
(1 +i 2) / (2 +i 3)
(1/1 +i 2/1) / (2 +i 3)
(Ratio) 0
(Ratio) 1
(Ratio) 1.2
(Ratio) 42
(Ratio) 42 / 3
((Ratio) 42) / 3
((Ratio) 42) / 5
(Ratio) 42 / 5
(Ratio) 42
((Ratio) 42) / 5
(Ratio) 42
(Ratio) 42 / 5
(Ratio) 42 / 6
license()
license(Ã 
)
license()
hash
hash(1)
hash(2)
license()
defmodule Plop do
  1 + 1
  2 + 2
end
defmodule Plop
do
  1 + 1
  2 + 2
end
def
123 = 123
def
def a = 1
def 1 = 1
def a = 1
def 1 = 1
def a = 1
a
def a = 1
a
def a = fn (x) do x * 2 end
a
List.reverse
license
def reverse = fn (x) { List.reverse(x) }
reverse([1, 2, 3])
def reverse = fn (x) { [:reversed | List.reverse(x)] }
reverse([1, 2, 3])
def reverse = fn (x) { List.reverse(x) }
reverse([1, 2, 3])
def reverse = fn (x) { [:reversed | List.reverse(x)] }
reverse([1, 2, 3])
def reverse = fn (x) { List.reverse(x) }
reverse([1, 2, 3])
def reverse = fn (x) { List.reverse(x) }
C3.reverse

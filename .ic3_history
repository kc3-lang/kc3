  2 + 2
end
def
123 = 123
def
def a = 1
def 1 = 1
def a = 1
def 1 = 1
def a = 1
a
def a = 1
a
def a = fn (x) do x * 2 end
a
List.reverse
license
def reverse = fn (x) { List.reverse(x) }
reverse([1, 2, 3])
def reverse = fn (x) { [:reversed | List.reverse(x)] }
reverse([1, 2, 3])
def reverse = fn (x) { List.reverse(x) }
reverse([1, 2, 3])
def reverse = fn (x) { [:reversed | List.reverse(x)] }
reverse([1, 2, 3])
def reverse = fn (x) { List.reverse(x) }
reverse([1, 2, 3])
def reverse = fn (x) { List.reverse(x) }
C3.reverse
def dt = macro (x) do
  quote do
    x = ^ x
    {x, x}
  end
end
dt(200)
def dt = macro (x) do
  quote do
    x = unquote x
def dt = macro (x) do
  quote do
    x = unquote(x)
    {x, x}
  end
end
dt(200)
dt(a)
a = [1, 2, 3]
dt(a)
def dt = macro (x) do
  quote do
    x = ^ unquote(x)
    {x, x}
  end
end
dt(a)
1 + 10000000000000000000000000000000000000000000
def beaucoup = 1 + 10000000000000000000000000000000000000000000
type(beaucoup)
def beaucoup = 1 + 10000000000000000000000000000000000000000000
type(beaucoup)
beaucoup
def beaucoup = (U8) beaucoup
type(beaucoup)
beacoup
beaucoup
1 / 4
(Ratio) 1 / 4
(Ratio) 1 / 4 * 2
1/4 * 2
type(1/4)
1/4 / 13/12
1/4 / 13/12 * 2
(Complex) 1
1 +i 2
type(1 +i 2)
1 +i 2 +i 3
(1 +i 2) * (2 +i 3)
sqrt(-1)
sqrt(-1) * sqrt(-1)
sqrt(-2) * sqrt(-2)
def dt = macro (x) do
  quote do
    x = ^ unquote(x)
    {x, x}
  end
end
dt(200)
dt(200 * 200)
dt(sqrt(-1))
def double = fn (x) { x * 2 }
double(200)
double(beaucoup)
def beaucoup = 1 + 10000000000000000000000000000000000000000000
double(beaucoup)
dt
double(3/4)
1 / double(3/4)
a = b

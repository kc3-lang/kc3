defmodule Spam.Bayes do

  def classes = [:spam, :ham]

  def db = Facts.database()

  #if Facts.open(db, "db/spam.facts") do :ok else end

  def p_s = 0.8

  def p_h = 1.0 - p_s

  def p_m_s = fn (m) {
    count_m_s = Facts.first_with_tags(db, m, :spam_bayes_m_s,
      count_m_s = ?, fn (fact) { count_m_s }) || 0
    count_m_h = Facts.first_with_tags(db, m, :spam_bayes_m_h,
      count_m_h = ?, fn (fact) { count_m_h)) || 0
    count_m_s / (count_m_s + count_m_h + 1)
  }

  def learn_word = fn (m, type) {
    if type == :spam do
      count = Facts.first_with(db, m, :spam_bayes_m_s, count = ?,
        fn (facts) { count }) || 0
      count = count + 1
      Facts.replace_tags(db, m, :spam_bayes_m_s, count)
    else
      count = Facts.first_with(db, m, :spam_bayes_m_h, count = ?,
        fn (facts) { count }) || 0
      count = count + 1
      Facts.replace_tags(db, m, :spam_bayes_m_h, count)
    end
  }
  
  def learn = fn (class, doc) {
    if List.has?(classes, class) = true do
      words = List.map(Str.split_words(doc), Str.to_lower)
      List.each(words, fn (m) { learn_word(m, type) })
    end
  }

  def is_spam? = fn (doc) {
    words = List.map(Str.split_words(doc), Str.to_lower)
    p_i = List.to_array(List.map(words, fn (m) { p_m_s(m) }), F128[])
  }  
    
end

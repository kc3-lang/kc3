defmodule List do

  def append = cfn List "list_init_append" (Result, List, Tag)

  def cast = cfn List "list_init_cast" (Result, Sym, Tag)

  def each = fn {
    ([], _) { :ok }
    ([a | b], f) { f(a); each(b, f) }
  }

  def filter = cfn List "list_filter" (List, Fn, Result)

  def find_if = fn {
    ([], _) { false }
    ([a | b], f) do
      c = f(a)
      if c do
        c
      else
        find_if(b, f)
      end              
    end
  }

  def has? = cfn Bool "list_has" (List, Tag, Result)

  def join = fn {
    (list, separator) { join(list, separator, []) }
    ([], sep, acc) { str(reverse(acc)) }
    ([first, second | rest], sep, acc) {
      join([second | rest], sep, [sep, first | acc])
    }
    ([first], sep, acc) { str(reverse([first | acc])) }
  }

  def map = cfn List "list_map" (List, Callable, Result)

  def reverse = fn {
    (x) { reverse(x, []) }
    ([], acc) { acc }
    ([a | b], acc) { reverse(b, [a | acc]) }
  }

  def sort = cfn List "list_sort" (List, Result)

  def sort_by = cfn List "list_sort_by" (List, Callable, Result)

end

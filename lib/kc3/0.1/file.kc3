defmodule File do

  def close = cfn Void "file_close" (Tag)

  def dirname = cfn Str "file_dirname" (Str, Result)

  # ensure_directory(path, mode) => success
  def ensure_directory = cfn Bool "file_ensure_directory" (Str, Tag)

  # ensure_parent_directory(path, mode) => success
  def ensure_parent_directory = cfn Bool "file_ensure_directory" (Str,
    Tag)

  def exists? = cfn Bool "file_exists" (Str, Result)

  def ext = cfn Str "file_ext" (Str, Result)

  def is_directory? = fn (path) do
    sb = File.stat(path)
    if (sb) do
      List.has?(sb.st_mode, :directory)
    else
      false
    end
  end

  def list = cfn List "file_list" (Str, Result)

  def list_files_recursive = fn {
    (dir) { list_files_recursive(dir, "", []) }
    ([], dir, acc) { List.sort(acc) }
    ([file | rest], dir, acc) {
      if (Str.starts_with?(file, ".") ||
          Str.ends_with?(file, "~"))
        list_files_recursive(rest, dir, acc) # skip
      else
        path = dir + file
        if (File.is_directory?(path)) do
          acc2 = list_files_recursive(File.list(path), path + "/", acc)
          list_files_recursive(rest, dir, acc2)
        else
          list_files_recursive(rest, dir, [path | acc])
        end
      end
    }
    (path, dir, acc) {
      if (File.is_directory?(path)) do
        list_files_recursive(File.list(path), path + "/", acc)
      else
        list_files_recursive(rest, dir, [path | acc])
      end
    }
  }

  def name = cfn Str "file_name" (Str, Result)

  def open_r = cfn S32 "file_open_r" (Str, Result)

  def stat = cfn File.Stat "file_stat" (Str, Result)

  def size = fn (path) {
    st = stat(path)
    st.st_size
  }

  def read_all = cfn Str "file_read_all" (Str, Result)

  def read_max_cfn = cfn Str "file_read_max" (Str, Uw, Result)

  def read_max = fn (path, max) { read_max_cfn(path, (Uw) max) }

  def unlink = cfn Bool "file_unlink" (Str, Result)

end

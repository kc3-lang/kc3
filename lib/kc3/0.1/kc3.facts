%{module: KC3.Facts.Dump,
  version: 1}
replace {KC3, :is_a, :module}
replace {KC3, :symbol, KC3.license}
replace {KC3.license, :symbol_value, cfn Void "kc3_license" ()}
add {KC3, :symbol, KC3.break}
replace {KC3.break, :symbol_value, cfn Void "kc3_break" ()}
add {KC3, :symbol, KC3.if_then_else}
replace {KC3.if_then_else, :arity, 3}
replace {KC3.if_then_else, :is_a, :special_operator}
replace {KC3.if_then_else, :symbol_value, cfn Tag "kc3_if_then_else" (Tag, Tag, Tag, Result)}
add {KC3, :symbol, KC3.type}
replace {KC3.type, :symbol_value, cfn Sym "tag_type" (Tag, Result)}
add {KC3, :symbol, KC3.facts_next_id}
replace {KC3.facts_next_id, :symbol_value, cfn Uw "kc3_facts_next_id" (Result)}
add {KC3, :symbol, KC3.getenv}
replace {KC3.getenv, :symbol_value, cfn Tag "kc3_getenv" (Str, Result)}
add {KC3, :symbol, KC3.dlopen}
replace {KC3.dlopen, :symbol_value, cfn Ptr "kc3_dlopen" (Str, Result)}
add {KC3, :symbol, KC3.sqrt}
replace {KC3.sqrt, :symbol_value, cfn Tag "tag_sqrt" (Tag, Result)}
add {KC3, :symbol, KC3.hash}
replace {KC3.hash, :symbol_value, cfn Uw "tag_hash_uw" (Tag)}
add {KC3, :symbol, KC3.defmodule}
replace {KC3.defmodule, :arity, 2}
replace {KC3.defmodule, :is_a, :special_operator}
replace {KC3.defmodule, :symbol_value, cfn Tag "kc3_defmodule" (Sym, Block, Result)}
add {KC3, :symbol, KC3.def}
replace {KC3.def, :arity, 1}
replace {KC3.def, :is_a, :special_operator}
replace {KC3.def, :symbol_value, cfn Tag "kc3_def" (Call, Result)}
add {KC3, :symbol, KC3.quote_cfn}
replace {KC3.quote_cfn, :arity, 1}
replace {KC3.quote_cfn, :is_a, :special_operator}
replace {KC3.quote_cfn, :symbol_value, cfn Tag "kc3_quote_cfn" (Sym, Result)}
add {KC3, :symbol, KC3.defoperator}
replace {KC3.defoperator, :arity, 1}
replace {KC3.defoperator, :is_a, :special_operator}
replace {KC3.defoperator, :symbol_value, cfn Tag "kc3_defoperator" (Tag, Result)}
add {KC3, :symbol, KC3.defstruct}
replace {KC3.defstruct, :arity, 1}
replace {KC3.defstruct, :is_a, :special_operator}
replace {KC3.defstruct, :symbol_value, cfn Tag "kc3_defstruct" (List, Result)}
add {KC3, :symbol, KC3.module}
replace {KC3.module, :symbol_value, cfn Sym "kc3_module" (Result)}
add {KC3, :symbol, KC3.require}
replace {KC3.require, :arity, 1}
replace {KC3.require, :is_a, :special_operator}
replace {KC3.require, :symbol_value, cfn Tag "kc3_require" (Sym, Result)}
add {KC3, :symbol, KC3.search_modules}
replace {KC3.search_modules, :symbol_value, cfn List "kc3_search_modules" (Result)}
add {KC3, :symbol, KC3.access}
replace {KC3.access, :symbol_value, cfn Tag "kc3_access" (Tag, List, Result)}
add {KC3, :symbol, KC3.let}
replace {KC3.let, :arity, 2}
replace {KC3.let, :is_a, :special_operator}
replace {KC3.let, :symbol_value, cfn Tag "kc3_let" (Tag, Tag, Result)}
add {KC3, :symbol, KC3.puts}
replace {KC3.puts, :symbol_value, cfn Sw "kc3_puts" (Tag)}
add {KC3, :symbol, KC3.load}
replace {KC3.load, :symbol_value, cfn Bool "kc3_load" (Str)}
add {KC3, :symbol, KC3.maybe_reload}
replace {KC3.maybe_reload, :symbol_value, cfn Bool "kc3_maybe_reload" (Str)}
add {KC3, :symbol, KC3.must_clean}
replace {KC3.must_clean, :symbol_value, cfn Bool "kc3_must_clean" (Sym, Result)}
add {KC3, :symbol, KC3.require}
replace {KC3.require, :symbol_value, cfn Bool "kc3_require" (Sym)}
add {KC3, :symbol, KC3.while}
replace {KC3.while, :arity, 2}
replace {KC3.while, :is_a, :special_operator}
replace {KC3.while, :symbol_value, cfn Tag "kc3_while" (Tag, Tag, Result)}
add {KC3, :symbol, (Ident) KC3.break}
replace {(Ident) KC3.break, :arity, 0}
replace {(Ident) KC3.break, :is_a, :special_operator}
replace {(Ident) KC3.break, :symbol_value, cfn Void "kc3_break" ()}
add {KC3, :symbol, (Ident) KC3.continue}
replace {(Ident) KC3.continue, :arity, 0}
replace {(Ident) KC3.continue, :is_a, :special_operator}
replace {(Ident) KC3.continue, :symbol_value, cfn Void "kc3_continue" ()}
add {KC3, :symbol, KC3.special_operator_arity}
replace {KC3.special_operator_arity, :symbol_value, cfn U8 "special_operator_arity" (Ident)}
add {KC3, :symbol, KC3.str}
replace {KC3.str, :symbol_value, cfn Str "kc3_str" (Tag, Result)}
add {KC3, :symbol, KC3.errno}
replace {KC3.errno, :symbol_value, cfn Sw "kc3_errno" ()}
add {KC3, :symbol, KC3.strerror}
replace {KC3.strerror, :symbol_value, cfn Str "kc3_strerror" (Sw, Result)}
add {KC3, :symbol, KC3.offsetof}
replace {KC3.offsetof, :symbol_value, cfn Uw "kc3_offsetof" (Sym, Sym, Result)}
add {KC3, :symbol, KC3.to_lisp}
replace {KC3.to_lisp, :symbol_value, cfn Tag "to_lisp" (Tag, Result)}
add {KC3, :symbol, KC3.inspect}
replace {KC3.inspect, :symbol_value, cfn Str "inspect_tag" (Tag, Result)}
add {KC3, :symbol, KC3.exit}
replace {KC3.exit, :symbol_value, cfn Void "kc3_exit" (Tag)}
add {KC3, :symbol, KC3._exit}
replace {KC3._exit, :symbol_value, cfn Void "kc3__exit" (Tag)}
add {KC3, :symbol, KC3.fork}
replace {KC3.fork, :symbol_value, cfn S32 "fork" ()}
add {KC3, :symbol, KC3.system}
replace {KC3.system, :symbol_value, cfn Str "kc3_system" (List, Result)}
add {KC3, :symbol, KC3.integer_reduce}
replace {KC3.integer_reduce, :symbol_value, cfn Tag "kc3_integer_reduce" (Tag, Result)}
add {KC3, :symbol, KC3.args}
replace {KC3.args, :symbol_value, cfn List "kc3_args" (Result)}
add {KC3, :symbol, KC3.stacktrace}
replace {KC3.stacktrace, :symbol_value,
         cfn List "kc3_stacktrace" (Result)}
add {KC3, :symbol, KC3.getpid}
replace {KC3.getpid, :symbol_value, cfn Sw "kc3_getpid" ()}
add {KC3, :symbol, KC3.getppid}
replace {KC3.getppid, :symbol_value, cfn Sw "kc3_getppid" ()}
add {KC3, :symbol, KC3.killpg}
replace {KC3.killpg, :symbol_value, cfn Bool "kc3_killpg" (Sw, Sym)}
add {KC3, :symbol, KC3.is_integer?}
replace {KC3.is_integer?, :symbol_value,
         cfn Bool "tag_is_integer" (Tag)}
add {KC3, :symbol, KC3.sysctl}
replace {KC3.sysctl, :symbol_value, cfn Tag "kc3_sysctl" (Result, List)}
add {KC3, :symbol, KC3.nil}
replace {KC3.nil, :symbol_value, void}
add {KC3, :symbol, KC3.block}
replace {KC3.block, :arity, 2}
replace {KC3.block, :is_a, :special_operator}
replace {KC3.block, :symbol_value,
         cfn Tag "kc3_block" (Tag, Tag, Result)}
add {KC3, :symbol, KC3.return}
replace {KC3.return, :arity, 1}
replace {KC3.return, :is_a, :special_operator}
replace {KC3.return, :symbol_value, cfn Void "kc3_return" (Tag)}
add {KC3, :symbol, KC3.return_from}
replace {KC3.return_from, :arity, 2}
replace {KC3.return_from, :is_a, :special_operator}
replace {KC3.return_from, :symbol_value,
         cfn Void "kc3_return_from" (Sym, Tag)}
add {KC3, :symbol, KC3.unwind_protect}
replace {KC3.unwind_protect, :symbol_value,
         cfn_macro Tag "kc3_unwind_protect" (Tag, Tag, Result)}

defmodule HTTPd do

  def server_loop = fn (client) {
    puts("HTTPd.server_loop: got client #{client}")
    req = HTTP.Request.buf_parse(client.buf_rw.r)
    if req do
      puts("HTTPd.server_loop: got request #{req}")
       res = %HTTP.Response{body: "<html>
  <head>
    <title>KC3 HTTPd</title>
    <style>
      pre {
        white-space: pre-wrap; /* CSS3 */
        white-space: -moz-pre-wrap; /* Mozilla */
        white-space: -pre-wrap; /* Opera 4-6 */
        white-space: -o-pre-wrap; /* Opera 7 */
        word-wrap: break-word; /* Internet Explorer 5.5+ */
      }
    </style>
  </head>
  <body>
    <h1>KC3 HTTPd</h1>
    <p>
      Hello from #{__FILE__}
    </p>
    <h2>Request</h2>
    <pre><code>#{req}</code></pre>
  </body>
</html>
"}
      puts("HTTPd.server_loop: response: #{res}")
      HTTP.Response.buf_write(res, client.buf_rw.w)
    end
  }

  def server = fn (host, port) {
    socket = Socket.listen(host, port)
    puts("KC3 HTTPd: listening on #{host}:#{port}")
    while true do
      client = Socket.Buf.accept(socket)
      server_loop(client)
      Socket.Buf.close(client)
    end
  }

  def main = fn {
    () {
      host = getenv("KC3_HTTPD_HOST")
      port = getenv("KC3_HTTPD_PORT")
      server(host, port)
    }
    (host, port) {
      server(host, port)
    }
  }

end

defmodule HTTPd do

  require Event
  require Facts
  require File
  require HTML
  require HTTP
  require HTTP.Request
  require HTTP.Response
  require HTTPd.Route
  require List
  require Socket
  require Socket.Buf
  require Str
  require URL

  def root_dir = "./static"

  def load_directory = fn (dir) {
    if File.exists?(dir) do
      if File.is_directory?(dir) do
        files = File.list(dir)
        List.each(files, fn (file) {
          if (! Str.starts_with?(file, ".")) do
            load(dir + file)
          end
        })
      end
    end
  }

  def load_app = fn () {
    HTTP.mime_type_load("config/mime.types")
    load_directory("app/views/")
    load_directory("app/controllers/")
    if (File.exists?("config/routes.kc3")) do
      load("config/routes.kc3")
    end
  }

  def http_client = fn (socket, events, client_ev, client) do
    if List.has?(events, :read) do
      req = HTTP.Request.buf_parse(client.buf_rw.r)
      if req do
        router = route_request(req)
        res = router(req)
        FD.set_blocking(socket, true)
        r = HTTP.Response.buf_write(res, client.buf_rw.w,
          req.method != :head)
        puts("#{res.code} #{client.addr_str} #{res.message} #{req.method} #{req.url}")
        FD.set_blocking(socket, false)
      end
    end
  end

  def acceptor = fn (server_socket, events, acceptor_ev, void) do
    if List.has?(events, :read) do
      client = Socket.Buf.accept(%Socket{fd: server_socket})
      FD.set_blocking(client.sockfd, false)
      client_ev = Event.new(event_base, client.sockfd, [:read, :persist],
        http_client, client)
      r = Event.add(client_ev, timeout)
    end
  end

  def daemonize = fn () {
    if (KC3.daemonize) do
      puts("forking to background")
      if fork() > 0 do
        exit(0)
      end
    end
  }

  def timeout = %Time{}

  def server = fn (host, port) {
    event_base = Event.base_new()
    socket = Socket.listen(host, port)
    puts("KC3 HTTPd: listening on #{host}:#{port}")
    acceptor_ev = Event.new(event_base, socket.fd, [:read, :persist],
                                 acceptor, void)
    r = Event.add(acceptor_ev, timeout)
    daemonize()
    r = Event.dispatch(event_base)
    if r do
      e = errno()
      puts("KC3 HTTPd: event dispatch error: #{strerror(e)}")
    end
    Socket.close(socket)
  }

  def main = fn {
    () {
      host = getenv("KC3_HTTPD_HOST")
      port = getenv("KC3_HTTPD_PORT")
      event_base = Event.base_new()
      load_app()
      server(host, port)
    }
    (host, port) {
      event_base = Event.base_new()
      load_app()
      server(host, port)
    }
  }

  def debug_page = fn (request) {
    body = "<html>
  <head>
    <title>KC3 HTTPd</title>
    <style>
      pre {
        white-space: pre-wrap; /* CSS3 */
        white-space: -moz-pre-wrap; /* Mozilla */
        white-space: -pre-wrap; /* Opera 4-6 */
        white-space: -o-pre-wrap; /* Opera 7 */
        word-wrap: break-word; /* Internet Explorer 5.5+ */
      }
    </style>
  </head>
  <body>
    <h1>KC3 HTTPd</h1>
    <p>
      Hello from #{__FILE__}
    </p>
    <h2>Request</h2>
    <pre><code>#{req}</code></pre>
  </body>
</html>
"
    %HTTP.Response{body: body}
  }

  def error_404_page = fn (request) {
    body = "<html>
  <head>
    <title>404 Not Found</title>
  </head>
  <body>
    <h1>404 Not Found</h1>
    <p>
      The requested URL #{HTML.escape(inspect(request.url))} was not found on this server.
    </p>
  </body>
</html>
"
    %HTTP.Response{code: 404, body: body}
  }

  def directory_page = fn (request) {
    files = List.sort(File.list(root_dir + request.url))
    file_li = HTTPd.fn (file) {
      slash = if Str.ends_with?(request.url, "/") do "" else "/" end
      real_path = "#{root_dir}#{request.url}#{slash}#{file}"
      dir? = File.is_directory?(real_path)
      dir_slash = if dir? do "/" else "" end
      path = "#{request.url}#{slash}#{file}#{dir_slash}"
      mode = if dir? do "dr-xr-xr-x" else "-r--r--r--" end
      "<li>#{mode} <a href=\"#{URL.escape(path)}\">#{HTML.escape(file)}</a>#{dir_slash}</li>\n"
    }
    body = """<html>
  <head>
    <title>Index of #{request.url}</title>
    <style type="text/css">
      ul { font-family: monospace; }
    </style>
  </head>
  <body>
    <h1>Index of #{request.url}</h1>
    <ul>
      #{str(List.map(files, file_li))}
    </ul>
  </body>
</html>
"""
    %HTTP.Response{body: body}
  }

  def show_page = fn (request) {
    ext = File.ext(request.url)
    path = root_dir + request.url
    if File.exists?(path) do
      mime = HTTP.mime_type(ext)
      stat = File.stat(path)
      headers = [{"Content-Type", (Str) mime},
                 {"Content-Length", (Str) stat.st_size} ]
      body = File.open_r(path)
      %HTTP.Response{body: body, headers: headers}
    else
      error_404_page(request)
    end
  }
  
  def routes = []

  def def_route = fn (path, controller) {
    tmp = List.append(HTTPd.routes,
                     %HTTPd.Route{path: path,
                                  controller: controller})
    def HTTPd.routes = tmp
  }

  def route_request = fn {
    (request) {
      route_request(request, routes)
    }
    (request, []) {
      error_404_page
    }
    (request, [route | next_routes]) {
      if (controller = HTTPd.Route.match(route, request)) do
        controller
      else
        route_request(request, next_routes)
      end
    }
  }

  def static_controller = fn (request) {
    path = root_dir + request.url
    render = if File.exists?(path) do
      if File.is_directory?(path) do
        directory_page
      else
        show_page
      end
    else
      error_404_page
    end
    render(request)
  }

  def_route("/", static_controller)

end

defmodule HTTPd do

  require Event
  require Facts
  require File
  require HTML
  require HTTP
  require HTTP.Request
  require HTTP.Response
  require HTTP.Upload
  require HTTPd.Route
  require List
  require Socket
  require Socket.Buf
  require Str
  require Thread
  require URL

  def concurrent_requests = 0
  def concurrent_requests_max = 1000

  def load_app = fn () {
    HTTP.mime_type_load("config/mime.types")
    load_directory("app/models/")
    if (File.exists?("config/db.kc3")) do
      load("config/db.kc3")
    end
    load_directory("app/controllers/")
    load_directory("app/views/")
    if (File.exists?("config/routes.kc3")) do
      load("config/routes.kc3")
    end
    load_directory("app/plugs/")
  }

  def maybe_reload_app = fn () {
    maybe_reload(__FILE__)
    maybe_reload_directory("app/models/")
    if (File.exists?("config/db.kc3")) do
      maybe_reload("config/db.kc3")
    end
    maybe_reload_directory("app/controllers/")
    maybe_reload_directory("app/views/")
    if (File.exists?("config/routes.kc3")) do
      maybe_reload("config/routes.kc3")
    end
    maybe_reload_directory("app/plugs/")
  }

  def clean_all_uploads = fn () {
    if (File.exists?(HTTP.Upload.tmp_filename_prefix)) do
      List.each(File.list(HTTP.Upload.tmp_filename_prefix),
        fn (file) {
          if (file != "." && file != "..") do
            path = HTTP.Upload.tmp_filename_prefix + file
            puts("HTTPd.clean_all_uploads: RM #{inspect(path)}")
            File.unlink(path)
          end
        })
    end
  }

  def clean_request_uploads = fn (params) {
    if params do
      List.each(params, fn {
        ({key, value}) {
          if ((type(value) == HTTP.Upload) &&
              Str.starts_with?(value.tmp_path,
                HTTP.Upload.tmp_filename_prefix) &&
              File.exists?(value.tmp_path)) do
            puts("HTTPd.clean_request_uploads: RM #{inspect(value.tmp_path)}")
            File.unlink(value.tmp_path)
          end
        }
        (_) { }
      })
    end
  }

  def http_client = fn (socket, events, client_ev, client) do
    if List.has?(events, :read) do
      def concurrent_requests = concurrent_requests + 1
      # maybe_reload_app()
      request = void
      request = HTTP.Request.buf_parse(client.buf_rw.r)
      result = if request do
        client_addr = if client.addr_str != "127.0.0.1" do
          client.addr_str
        else
          headers = request.headers
          real_ip = headers["X-Real-IP"]
          if (real_ip) do real_ip else client.addr_str end
        end
        request = Struct.put(request, :client_addr, client_addr)
        user_agent = HTTP.Request.header(request, "User-Agent")
        puts("--- #{client_addr} #{request.method} #{request.url} #{inspect(user_agent)}")
        if (type(request.method) == Str) do
          response = error_405_page(request)
        else
          request = plug_request(request)
          response = route_and_render_request(request)
        end
        clean_request_uploads(request.body)
        response = HTTP.Response.set_header(response,
          "Connection", "Keep-Alive")
        response = HTTP.Response.set_header(response,
          "Keep-Alive", "timeout=5, max=1000")
        response = HTTP.Response.set_header(response,
          "Server", "kc3_httpd")
        response = HTTP.Response.set_header(response,
          "Accept-Ranges", "bytes")
        r = HTTP.Response.buf_write(response, client.buf_rw.w,
          request.method != HEAD)
        puts("#{response.code} #{client_addr} #{request.method} #{request.url} #{inspect(user_agent)}")
      else
        Event.del(client_ev)
        File.close(socket)
      end
      def concurrent_requests = concurrent_requests - 1
      result
    end
  end

  def timeout = %Time{tv_sec: 5}

  def acceptor = fn (server_socket, events, acceptor_ev, void) do
    if List.has?(events, :read) &&
       concurrent_requests < concurrent_requests_max do
      client = Socket.Buf.accept(%Socket{fd: server_socket})
      client_ev = Event.new(event_base, client.sockfd, [:read, :persist],
        http_client, client)
      r = Event.add(client_ev, timeout)
    end
  end

  def daemonize = fn () {
    if (KC3.daemonize) do
      puts("forking to background")
      if (pid = fork()) > 0 do
        _exit(0)
      end
    end
  }

  def time_zero = %Time{}

  def server_thread = fn () {
    if event_base = Event.base_new() do
      acceptor_ev = Event.new(event_base, socket.fd, [:read, :persist],
        acceptor, void)
      r = Event.add(acceptor_ev, time_zero)
      r = Event.dispatch(event_base)
      if r do
        e = errno()
        puts("KC3 HTTPd: event dispatch error: #{strerror(e)}")
      end
      Socket.close(socket)
    end
  }

  def thread_count = 1
  #def thread_count = ncpu

  def server = fn (host, port) {
    def socket = Socket.listen(host, port)
    if socket do
      daemonize()
      puts("KC3 HTTPd: listening on #{host}:#{port}")
      clean_all_uploads()
      load_app()
      if HTTPd.thread_count > 1 do
        threads = List.map(List.count(HTTPd.thread_count - 1), fn (x) {
          Thread.new(HTTPd.server_thread)
        })
        HTTPd.server_thread()
        List.map(threads, Thread.delete)
      else
        HTTPd.server_thread()
      end
      0
    else
      puts("KC3 HTTPd: cannot listen on #{host}:#{port}")
      -1
    end
  }

  def main = fn {
    () {
      host = getenv("KC3_HTTPD_HOST")
      port = getenv("KC3_HTTPD_PORT")
      event_base = Event.base_new()
      server(host, port)
    }
    (host, port) {
      event_base = Event.base_new()
      server(host, port)
    }
  }

  def redirect_to = fn (url) {
    %HTTP.Response{code: 303,
                   message: "See other",
                   headers: [{"Location", URL.escape(url)}],
                   body: ""}
  }

  def debug_page = fn (request) {
    body = "<html>
  <head>
    <title>KC3 HTTPd</title>
    <style>
      pre {
        white-space: pre-wrap; /* CSS3 */
        white-space: -moz-pre-wrap; /* Mozilla */
        white-space: -pre-wrap; /* Opera 4-6 */
        white-space: -o-pre-wrap; /* Opera 7 */
        word-wrap: break-word; /* Internet Explorer 5.5+ */
      }
    </style>
  </head>
  <body>
    <h1>KC3 HTTPd</h1>
    <p>
      Hello from #{__FILE__}
    </p>
    <h2>Request</h2>
    <pre><code>#{request}</code></pre>
  </body>
</html>
"
    %HTTP.Response{body: body}
  }

  def error_400_page = fn (request) {
    body = """
<html>
  <head>
    <title>400 Bad Request</title>
  </head>
  <body>
    <h1>400 Bad Request</h1>
    <p>
      The request is invalid and could not be treated by the server.
    </p>
  </body>
</html>
"""
    %HTTP.Response{code: 400, body: body}
  }

  def error_404_page = fn (request) {
    body = """
<html>
  <head>
    <title>404 Not Found</title>
  </head>
  <body>
    <h1>404 Not Found</h1>
    <p>
      The requested URL #{HTML.escape(inspect(request.url))} for method #{HTML.escape(inspect(request.method))} was not found on this server.
    </p>
  </body>
</html>
"""
    %HTTP.Response{code: 404, body: body}
  }

  def error_405_page = fn (request) {
    body = """
<html>
  <head>
    <title>405 Method Not Allowed</title>
  </head>
  <body>
    <h1>405 Method Not Allowed</h1>
    <p>
      The requested method #{HTML.escape(inspect(request.method))} is not accepted on this server.
    </p>
  </body>
</html>
"""
    %HTTP.Response{code: 405, body: body}
  }

  def plugs = []

  def def_plug = fn (plug) {
    tmp = List.append(HTTPd.plugs, plug)
    def HTTPd.plugs = tmp
  }

  def plug_request = fn {
    (request) { plug_request(request, plugs) }
    (request, []) { request }
    (request, [plug | rest]) { plug_request(plug(request), rest) }
  }

  def routes = []

  def def_route = fn (path, controller) {
    tmp = List.append(HTTPd.routes,
      %HTTPd.Route{path: path,
                   controller: controller})
    def HTTPd.routes = tmp
  }

  def route_and_render_request = fn {
    (request) {
      route_and_render_request(request, routes)
    }
    (request, []) {
      error_404_page(request)
    }
    (request, [route | next_routes]) {
      response = if ((controller = HTTPd.Route.match(route, request))) do
        let(request.params, controller(request))
      end
      response || route_and_render_request(request, next_routes)
    }
  }

  def parse_range = fn {
    (false, max) { { (Sw) 0, (Sw) max } }
    (range, max) {
      if Str.starts_with?(range, "bytes=") do
        range = Str.slice(range, 6, -1)
        [start, end_] = Str.split(range, "-")
        if start do
          start = (Sw) start
          end_ = if end_ != "" do
            (Sw) end_
          else
            (Sw) max
          end
          { start, end_ }
        else
          { (Sw) 0, (Sw) max }
        end
      else
        { (Sw) 0, (Sw) max }
      end
    }
  }

  HTTPd.Route.def_static_route("", "./static/", 0)

end

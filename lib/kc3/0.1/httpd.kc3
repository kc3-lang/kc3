defmodule HTTPd do

  require Event
  require Facts
  require File
  require HTML
  require HTTP
  require HTTP.Request
  require HTTP.Response
  require HTTPd.Route
  require List
  require Socket
  require Socket.Buf
  require Str
  require URL

  def load_app = fn () {
    HTTP.mime_type_load("config/mime.types")
    load_directory("app/")
    if (File.exists?("config/routes.kc3")) do
      load("config/routes.kc3")
    end
  }

  def http_client = fn (socket, events, client_ev, client) do
    if List.has?(events, :read) do
      request = void
      request = HTTP.Request.buf_parse(client.buf_rw.r)
      if request do
        if (type(request.method) == Str) do
          response = error_405_page(request)
        else
          router = route_request(request)
          response = router(request)
        end
        response = HTTP.Response.set_header(response,
          "Connection", "Keep-Alive")
        response = HTTP.Response.set_header(response,
          "Keep-Alive", "timeout=5, max=1000")
        response = HTTP.Response.set_header(response,
          "Server", "kc3_httpd")
        response = HTTP.Response.set_header(response,
          "Accept-Ranges", "bytes")
        r = HTTP.Response.buf_write(response, client.buf_rw.w,
          request.method != HEAD)
        client_addr = if client.addr_str != "127.0.0.1" do
          client.addr_str
        else
          headers = request.headers
          real_ip = headers["X-Real-IP"]
          if (real_ip) do real_ip else client.addr_str end
        end
        user_agent = HTTP.Request.header(request, "User-Agent")
        puts("#{response.code} #{client_addr} #{request.method} #{request.url} #{inspect(user_agent)}")
      else
        Event.del(client_ev)
        File.close(socket)
      end
    end
  end

  def timeout = %Time{tv_sec: (Sw) 5}

  def acceptor = fn (server_socket, events, acceptor_ev, void) do
    if List.has?(events, :read) do
      client = Socket.Buf.accept(%Socket{fd: server_socket})
      client_ev = Event.new(event_base, client.sockfd, [:read, :persist],
        http_client, client)
      r = Event.add(client_ev, timeout)
    end
  end

  def daemonize = fn () {
    if (KC3.daemonize) do
      puts("forking to background")
      if fork() > 0 do
        exit(0)
      end
    end
  }

  def time_zero = %Time{}

  def server = fn (host, port) {
    daemonize()
    if event_base = Event.base_new() do
      if socket = Socket.listen(host, port) do
        puts("KC3 HTTPd: listening on #{host}:#{port}")
        acceptor_ev = Event.new(event_base, socket.fd, [:read, :persist],
          acceptor, void)
        r = Event.add(acceptor_ev, time_zero)
        r = Event.dispatch(event_base)
        if r do
          e = errno()
          puts("KC3 HTTPd: event dispatch error: #{strerror(e)}")
        end
        Socket.close(socket)
      end
    end
  }

  def main = fn {
    () {
      host = getenv("KC3_HTTPD_HOST")
      port = getenv("KC3_HTTPD_PORT")
      event_base = Event.base_new()
      load_app()
      server(host, port)
    }
    (host, port) {
      event_base = Event.base_new()
      load_app()
      server(host, port)
    }
  }

  def redirect_to = fn (url) {
    %HTTP.Response{code: 303,
                   message: "See other",
                   headers: [{"Location", url}],
                   body: ""}
  }

  def debug_page = fn (request) {
    body = "<html>
  <head>
    <title>KC3 HTTPd</title>
    <style>
      pre {
        white-space: pre-wrap; /* CSS3 */
        white-space: -moz-pre-wrap; /* Mozilla */
        white-space: -pre-wrap; /* Opera 4-6 */
        white-space: -o-pre-wrap; /* Opera 7 */
        word-wrap: break-word; /* Internet Explorer 5.5+ */
      }
    </style>
  </head>
  <body>
    <h1>KC3 HTTPd</h1>
    <p>
      Hello from #{__FILE__}
    </p>
    <h2>Request</h2>
    <pre><code>#{request}</code></pre>
  </body>
</html>
"
    %HTTP.Response{body: body}
  }

  def error_400_page = fn (request) {
    body = """
<html>
  <head>
    <title>400 Bad Request</title>
  </head>
  <body>
    <h1>400 Bad Request</h1>
    <p>
      The request is invalid and could not be treated by the server.
    </p>
  </body>
</html>
"""
    %HTTP.Response{code: 404, body: body}
  }

  def error_404_page = fn (request) {
    body = """
<html>
  <head>
    <title>404 Not Found</title>
  </head>
  <body>
    <h1>404 Not Found</h1>
    <p>
      The requested URL #{HTML.escape(inspect(request.url))} was not found on this server.
    </p>
  </body>
</html>
"""
    %HTTP.Response{code: 404, body: body}
  }

  def error_405_page = fn (request) {
    body = """
<html>
  <head>
    <title>405 Method Not Allowed</title>
  </head>
  <body>
    <h1>405 Method Not Allowed</h1>
    <p>
      The requested method #{HTML.escape(inspect(request.method))} is not accepted on this server.
    </p>
  </body>
</html>
"""
    %HTTP.Response{code: 405, body: body}
  }

  def routes = []

  def def_route = fn (path, controller) {
    tmp = List.append(HTTPd.routes,
                     %HTTPd.Route{path: path,
                                  controller: controller})
    def HTTPd.routes = tmp
  }

  def route_request = fn {
    (request) {
      route_request(request, routes)
    }
    (request, []) {
      error_404_page
    }
    (request, [route | next_routes]) {
      if (controller = HTTPd.Route.match(route, request)) do
        controller
      else
        route_request(request, next_routes)
      end
    }
  }

  def url_eat = fn {
    ([], 0) { "" }
    (url, 0) {
      if (type(url) == List) do
        List.join(url, "/")
      else
        url
      end
    }
    ([first | rest], i) { url_eat(rest, i - 1) }
    ([], i) { "" }
    (url, i) { "/" + url_eat(Str.split(url, "/"), i + 1) }
  }

  def parse_range = fn {
    (false, max) { { (Sw) 0, (Sw) max } }
    (range, max) {
      if Str.starts_with?(range, "bytes=") do
        range = Str.slice(range, 6, -1)
        [start, end_] = Str.split(range, "-")
        if start do
          start = (Sw) start
          end_ = if end_ != "" do
            (Sw) end_
          else
            (Sw) max
          end
          { start, end_ }
        else
          { (Sw) 0, (Sw) max }
        end
      else
        { (Sw) 0, (Sw) max }
      end
    }
  }
    
  def def_static_route = fn (prefix, root_dir, url_skip) {
    directory_page = HTTPd.fn (request) {
      url = url_eat(request.url, url_skip)
      files = List.sort(File.list(root_dir + url))
      file_li = HTTPd.fn (file) {
        slash = if Str.ends_with?(url, "/") do "" else "/" end
        real_path = "#{root_dir}#{url}#{slash}#{file}"
        dir? = File.is_directory?(real_path)
        dir_slash = if dir? do "/" else "" end
        path = "#{prefix}#{url}#{slash}#{file}#{dir_slash}"
        mode = if dir? do "dr-xr-xr-x" else "-r--r--r--" end
        """<li>#{mode} <a href="#{URL.escape(path)}">#{HTML.escape(file)}</a>#{dir_slash}</li>\n"""
      }
      body = """
<html>
  <head>
    <title>Index of #{prefix}#{url}</title>
    <style type="text/css">
      ul { font-family: monospace; }
    </style>
  </head>
  <body>
    <h1>Index of #{prefix}#{url}</h1>
    <ul>
      #{str(List.map(files, file_li))}
    </ul>
  </body>
</html>
"""
      %HTTP.Response{body: body}
    }
    show_page = HTTPd.fn (request) {
      url = url_eat(request.url, url_skip)
      ext = File.ext(url)
      path = root_dir + url
      if File.exists?(path) do
        mime = HTTP.mime_type(ext)
        stat = File.stat(path)
        last_modified = Str.ftime(stat.st_mtim, "%a, %d %b %G %T %Z")
        range = HTTP.Request.header(request, "Range")
        {range_start, range_end} = parse_range(range, stat.st_size)
        headers = [{"Content-Type", (Str) mime},
                   {"Content-Length", (Str) stat.st_size},
                   {"Content-Range", "bytes=#{range_start}-#{range_end}"},
                   {"Last-Modified", last_modified}]
        fd = File.open_r(path)
        body = %{fd: fd, start: range_start, end_: range_end}
        %HTTP.Response{body: body, headers: headers}
      else
        error_404_page(request)
      end
    }
    route = HTTPd.fn (request) {
      url = url_eat(request.url, url_skip)
      render = if (! Str.starts_with?(url, "/") ||
                   Str.has_str?(url, "/../") ||
                   Str.ends_with?(url, "/..")) do
        error_404_page
      else
        path = root_dir + url
        if ! File.exists?(path) do
          error_404_page
        else
          if File.is_directory?(path) do
            directory_page
          else
            show_page
          end
        end
      end
      render(request)
    }
    def_route(prefix, route)
  }

  def_static_route("", "./static/", 0)

end

defmodule HTTPd do

  def root_dir = "."

  def server = fn (host, port) {
    socket = Socket.listen(host, port)
    puts("KC3 HTTPd: listening on #{host}:#{port}")
    while true do
      client = Socket.Buf.accept(socket)
      server_client(client)
      Socket.Buf.close(client)
    end
    Socket.close(socket)
  }

  def server_client = fn (client) {
    puts("HTTPd.server_loop: got client #{client}")
    req = HTTP.Request.buf_parse(client.buf_rw.r)
    if req do
      router = route_request(req)
      res = router(req)
      HTTP.Response.buf_write(res, client.buf_rw.w)
    end
  }

  def main = fn {
    () {
      host = getenv("KC3_HTTPD_HOST")
      port = getenv("KC3_HTTPD_PORT")
      server(host, port)
    }
    (host, port) {
      server(host, port)
    }
  }

  def debug_page = fn (request) {
    body = "<html>
  <head>
    <title>KC3 HTTPd</title>
    <style>
      pre {
        white-space: pre-wrap; /* CSS3 */
        white-space: -moz-pre-wrap; /* Mozilla */
        white-space: -pre-wrap; /* Opera 4-6 */
        white-space: -o-pre-wrap; /* Opera 7 */
        word-wrap: break-word; /* Internet Explorer 5.5+ */
      }
    </style>
  </head>
  <body>
    <h1>KC3 HTTPd</h1>
    <p>
      Hello from #{__FILE__}
    </p>
    <h2>Request</h2>
    <pre><code>#{req}</code></pre>
  </body>
</html>
"
    %HTTP.Response{body: body}
  }

  def error_404_page = fn (request) {
    body = "<html>
  <head>
    <title>404 Not Found</title>
  </head>
  <body>
    <h1>404 Not Found</h1>
    <p>
      The requested URL #{request.url} was not found on this server.
    </p>
  </body>
</html>
"
    %HTTP.Response{code: 404, body: body}
  }

  def directory_page = fn (request) {
    files = File.list(root_dir + request.url)
    file_li = fn (file) {
      slash = if request.url == "/" do "" else "/" end
      "<li><a href=\"#{request.url}#{slash}#{file}\">#{request.url}#{slash}#{file}</a></li>"
    }
    body = "<html>
  <head>
    <title>Index of #{request.url}</title>
  </head>
  <body>
    <h1>Index of #{request.url}</h1>
    <ul>
      #{str(List.map(files, file_li))}
    </ul>
  </body>
</html>
"
    %HTTP.Response{body: body}
  }

  def route_request = fn (request) {
    path = root_dir + request.url
    if File.exists?(path) do
      if File.is_directory?(path) do
        directory_page
      else
        debug_page
      end
    else
      error_404_page
    end
  }

end

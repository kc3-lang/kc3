## kc3
## Copyright from 2022 to 2025 kmx.io <contact@kmx.io>
##
## Permission is hereby granted to use this software granted the above
## copyright notice and this permission paragraph are included in all
## copies and substantial portions of this software.
##
## THIS SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY GUARANTEE OF
## PURPOSE AND PERFORMANCE. IN NO EVENT WHATSOEVER SHALL THE
## AUTHOR BE CONSIDERED LIABLE FOR THE USE AND PERFORMANCE OF
## THIS SOFTWARE.

defmodule Math do

  def pow = fn (a, b) {
    if (type(b) == F32) do
      F32.pow((F32) a, b)
    else
      if (type(b) == F64) do
        F64.pow((F64) a, b)
      else
        if (type(b) == F128) do
          F128.pow((F128) a, b)
        else
          c = 1
          while (b > 0) do
            c = c * a
            b = b - 1
          end
          c
        end
      end
    end
  }

  def mersenne_number = fn (n) {
    (1 << n) - 1
  }

  def mersenne_prime_test = fn (max) {
    d = void
    i = 1
    while ((i < max) && (! d)) do
      p = mersenne_number(i)
      puts("mersenne_number(#{i}) = #{p}")
      d = greatest_divisor(p)
      if d do
        puts(" XXX #{d}")
      end
      i = i + 1
    end
    if d do
      {i, p, d, (p / d)}
    else
      {:ok, max}
    end
  }

  def greatest_divisor = fn (a) {
    b = a / 2
    while ((b > 1) && (a mod b)) do
      b = b - 1
    end
    if b <= 1 do
      void
    else
      b
    end
  }

  def lowest_divisor = fn (a) {
    b = 2
    max = a / 2 + 1
    while ((b < max) && (a mod b)) do
      b = b + 1
    end
    if b == max do
      void
    else
      b
    end
  }

  def next_prime = fn (a) {
    b = greatest_divisor(a)
    while b do
      a = a + 1
      b = greatest_divisor(a)
    end
    a
  }

end

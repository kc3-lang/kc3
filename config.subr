#!/bin/sh
## kc3
## Copyright from 2022 to 2025 kmx.io <contact@kmx.io>
##
## Permission is hereby granted to use this software granted the above
## copyright notice and this permission paragraph are included in all
## copies and substantial portions of this software.
##
## THIS SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY GUARANTEE OF
## PURPOSE AND PERFORMANCE. IN NO EVENT WHATSOEVER SHALL THE
## AUTHOR BE CONSIDERED LIABLE FOR THE USE AND PERFORMANCE OF
## THIS SOFTWARE.

set -e

cd "$(dirname "$0")"

build_lib() {
    echo >> ${CONFIG_MK}
    echo "$LIB_ASAN: $OBJECTS_ASAN build_lib_asan" >> ${CONFIG_MK}
    echo "	./build_lib_asan $LIB_ASAN" >> ${CONFIG_MK}

    echo >> ${CONFIG_MK}
    echo "$LIB_COV: $OBJECTS_COV build_lib_cov" >> ${CONFIG_MK}
    echo "	./build_lib_cov $LIB_COV" >> ${CONFIG_MK}

    echo >> ${CONFIG_MK}
    echo "$LIB_DEBUG: $OBJECTS_DEBUG build_lib_debug" >> ${CONFIG_MK}
    echo "	./build_lib_debug $LIB_DEBUG" >> ${CONFIG_MK}

    echo >> ${CONFIG_MK}
    echo "$LIB: $OBJECTS build_lib_main" >> ${CONFIG_MK}
    echo "	./build_lib_main $LIB" >> ${CONFIG_MK}
}

build_lo() {
    build_lo_c
}

build_lo_c() {
    for SRC in $SOURCES; do
        echo >> ${CONFIG_MK}
        SRC_ASAN_LO="$(c2ext .asan.lo "$SRC")"
        c_ext_rule .asan.lo "$SRC" build_c_asan >> ${CONFIG_MK}
        echo "	./build_c_asan $SRC $SRC_ASAN_LO" >> ${CONFIG_MK}

        echo >> ${CONFIG_MK}
        SRC_COV_LO="$(c2ext .cov.lo "$SRC")"
        c_ext_rule .cov.lo "$SRC" build_c_cov >> ${CONFIG_MK}
        echo "	./build_c_cov $SRC $SRC_COV_LO" >> ${CONFIG_MK}

        echo >> ${CONFIG_MK}
        SRC_DEBUG_LO="$(c2ext .debug.lo "$SRC")"
        c_ext_rule .debug.lo "$SRC" build_c_debug >> ${CONFIG_MK}
        echo "	./build_c_debug $SRC $SRC_DEBUG_LO" >> ${CONFIG_MK}

        echo >> ${CONFIG_MK}
        SRC_LO="$(c2ext .main.lo "$SRC")"
        c_ext_rule .main.lo "$SRC" build_c_main >> ${CONFIG_MK}
        echo "	./build_c_main $SRC $SRC_LO" >> ${CONFIG_MK}
    done
}

build_lo_cxx() {
    for SRC in $SOURCES_CXX; do
        echo >> ${CONFIG_MK}
        SRC_ASAN_LO="$(cxx2ext .asan.lo "$SRC")"
        cxx_ext_rule .asan.lo "$SRC" build_cxx_asan >> ${CONFIG_MK}
        echo "	./build_cxx_asan $SRC $SRC_ASAN_LO" >> ${CONFIG_MK}

        echo >> ${CONFIG_MK}
        SRC_COV_LO="$(cxx2ext .cov.lo "$SRC")"
        cxx_ext_rule .cov.lo "$SRC" build_cxx_cov >> ${CONFIG_MK}
        echo "	./build_cxx_cov $SRC $SRC_COV_LO" >> ${CONFIG_MK}

        echo >> ${CONFIG_MK}
        SRC_DEBUG_LO="$(cxx2ext .debug.lo "$SRC")"
        cxx_ext_rule .debug.lo "$SRC" build_cxx_debug >> ${CONFIG_MK}
        echo "	./build_cxx_debug $SRC $SRC_DEBUG_LO" >> ${CONFIG_MK}

        echo >> ${CONFIG_MK}
        SRC_LO="$(cxx2ext .main.lo "$SRC")"
        cxx_ext_rule .main.lo "$SRC" build_cxx_main >> ${CONFIG_MK}
        echo "	./build_cxx_main $SRC $SRC_LO" >> ${CONFIG_MK}
    done
}

build_lo_objc() {
    for SRC in $OBJC_SOURCES; do
        echo >> ${CONFIG_MK}
        SRC_ASAN_LO="$(objc2ext .asan.lo "$SRC")"
        objc_ext_rule .asan.lo "$SRC" build_objc_asan >> ${CONFIG_MK}
        echo "	./build_objc_asan $SRC $SRC_ASAN_LO" >> ${CONFIG_MK}

        echo >> ${CONFIG_MK}
        SRC_COV_LO="$(objc2ext .cov.lo "$SRC")"
        objc_ext_rule .cov.lo "$SRC" build_objc_cov >> ${CONFIG_MK}
        echo "	./build_objc_cov $SRC $SRC_COV_LO" >> ${CONFIG_MK}

        echo >> ${CONFIG_MK}
        SRC_DEBUG_LO="$(objc2ext .debug.lo "$SRC")"
        objc_ext_rule .debug.lo "$SRC" build_objc_debug >> ${CONFIG_MK}
        echo "	./build_objc_debug $SRC $SRC_DEBUG_LO" >> ${CONFIG_MK}

        echo >> ${CONFIG_MK}
        SRC_MAIN_LO="$(objc2ext .main.lo "$SRC")"
        objc_ext_rule .main.lo "$SRC" build_objc_main >> ${CONFIG_MK}
        echo "	./build_objc_main $SRC $SRC_MAIN_LO" >> ${CONFIG_MK}
    done
}

build_prog() {
    echo >> ${CONFIG_MK}
    echo "$PROG_ASAN: $LOCAL_LIBS_ASAN $OBJECTS_ASAN build_prog_asan" \
         >> ${CONFIG_MK}
    echo "	./build_prog_asan $PROG_ASAN" >> ${CONFIG_MK}

    echo >> ${CONFIG_MK}
    echo "$PROG_COV: $LOCAL_LIBS_COV $OBJECTS_COV build_prog_cov" \
         >> ${CONFIG_MK}
    echo "	./build_prog_cov $PROG_COV" >> ${CONFIG_MK}

    echo >> ${CONFIG_MK}
    echo "$PROG_DEBUG: $LOCAL_LIBS_DEBUG $OBJECTS_DEBUG build_prog_debug" \
         >> ${CONFIG_MK}
    echo "	./build_prog_debug $PROG_DEBUG" >> ${CONFIG_MK}

    echo >> ${CONFIG_MK}
    echo "$PROG: $LOCAL_LIBS $OBJECTS build_prog_main" >> ${CONFIG_MK}
    echo "	./build_prog_main $PROG" >> ${CONFIG_MK}
}

c_o_rule() {
    "$CC" $CPPFLAGS $CFLAGS -M "$1" || {
        echo "$1" | sed -e 's/^\(.*\)\.c$/\1.o: \1.c/'
    }
    echo "$1: $2" | sed -e 's/^\(.*\)\.c:/\1.o:/'
}

c_ext_rule() {
    c_o_rule "$2" "$3" | sed -e "s/\.o:/$1:/"
}

c_lo_rule() {
    c_ext_rule .lo "$1"
}

c_prog_rule() {
    { c_o_rule "$1" || exit 1; } | sed -e 's/[.]o:/:/'
}

c2ext() {
    EXT="$1"; shift
    echo "$@" | sed -e "s/[.]c$/${EXT}/" -e "s/[.]c /${EXT} /g"
}

c2la() {
    c2ext .la "$@"
}

c2lo() {
    c2ext .lo "$@"
}

c2o() {
    c2ext .o "$@"
}

c2prog() {
    echo "$@" | sed -e 's/[.]c$//' -e 's/[.]c / /g'
}

config_asan() {
    NAME="ASAN"
    OUT_C=".config_$NAME.c"
    OUT=".config_$NAME"
    echo "/* generated by configure */" > "$OUT_C"
    echo "#include <stdlib.h>" >> "$OUT_C"
    echo "int main (void) {" >> "$OUT_C"
    echo "  void *x = malloc(1);" >> "$OUT_C"
    echo "  free(x);" >> "$OUT_C"
    echo "  return 0;" >> "$OUT_C"
    echo "}" >> "$OUT_C"
    if $LIBTOOL --tag CC --mode link ${CC} ${CPPFLAGS} ${CFLAGS} \
                -fsanitize=address -fno-omit-frame-pointer \
                "$OUT_C" ${LIBS} -lasan -o "$OUT" >/dev/null 2>&1; then
        eval "HAVE_$NAME=true"
        echo "HAVE_$NAME = true" >> ${CONFIG_MK}
    else
        eval "HAVE_$NAME=false"
        echo "HAVE_$NAME = false" >> ${CONFIG_MK}
    fi
    rm -f "$OUT" "$OUT_C"
}

config_cocoa() {
    OUT_M=".config_COCOA.m"
    OUT=".config_COCOA"
    echo "/* generated by configure */" > "$OUT_M"
    echo "#import <Cocoa/Cocoa.h>" >> "$OUT_M"
    echo "int main (void) { return 0; }" >> "$OUT_M"
    if $LIBTOOL --tag CC --mode link ${OBJC} ${OBJCFLAGS} \
                "$OUT_M" ${LIBS} -framework Cocoa -o "$OUT" >/dev/null 2>&1; then
        eval "HAVE_COCOA=true"
        echo "HAVE_COCOA = true" >> "${CONFIG_MK}"
        echo "#define HAVE_COCOA 1" >> "${CONFIG_H}"
        LIBS="$LIBS -framework Cocoa"
    else
        eval "HAVE_COCOA=false"
        echo "HAVE_COCOA = false" >> "${CONFIG_MK}"
        echo "#define HAVE_COCOA 0" >> "${CONFIG_H}"
    fi
    rm -f "$OUT" "$OUT_M"
}

config_define() {
    echo "#define $1 $2" >> "${CONFIG_H}"
}

config_fuse() {
    OUT=".config_fuse"
    OUT_C=".config_fuse.c"
    echo "/* generated by configure */" > "$OUT_C"
    echo "#define FUSE_USE_VERSION 26" >> "$OUT_C"
    echo "#include <fuse.h>" >> "$OUT_C"
    echo "#include <fuse_opt.h>" >> "$OUT_C"
    echo "int main (int argc, char **argv) {" >> "$OUT_C"
    echo "  struct fuse_operations ops;" >> "$OUT_C"
    echo "  return fuse_main(argc, argv, &ops);" >> "$OUT_C"
    echo "}" >> "$OUT_C"
    if $LIBTOOL --tag CC --mode link ${CC} ${CPPFLAGS} ${CFLAGS} \
                "$OUT_C" -o "$OUT" >/dev/null 2>&1; then
        echo "#define HAVE_FUSE 1" >> "${CONFIG_H}"
        HAVE_FUSE=true
    else
        echo "#define HAVE_FUSE 0" >> "${CONFIG_H}"
        HAVE_FUSE=false
    fi
    rm -f "$OUT_C"
    rm -f "$OUT"
}

config_have() {
    if "$2"; then
        echo "#define HAVE_$1 1" >> "${CONFIG_H}"
    else
        echo "#define HAVE_$1 0" >> "${CONFIG_H}"
    fi
    eval "HAVE_$1=$2"
}

config_have_bcrypt() {
    OUT=".config_have_bcrypt"
    OUT_C=".config_have_bcrypt.c"
    echo "/* generated by configure */" > "$OUT_C"
    echo "#include <pwd.h>" >> "$OUT_C"
    echo "int main (void) {" >> "$OUT_C"
    echo "  char *salt = bcrypt_gensalt(12);" >> "$OUT_C"
    echo "  return 0;" >> "$OUT_C"
    echo "}" >> "$OUT_C"
    if $LIBTOOL --tag CC --mode link ${CC} ${CPPFLAGS} ${CFLAGS} \
                "$OUT_C" -o "$OUT" >/dev/null 2>&1; then
        echo "#define HAVE_CRYPT_NEWHASH 1" >> "${CONFIG_H}"
        HAVE_CRYPT_NEWHASH=true
    else
        echo "#define HAVE_CRYPT_NEWHASH 0" >> "${CONFIG_H}"
        HAVE_CRYPT_NEWHASH=false
    fi
    rm -f "$OUT_C"
    rm -f "$OUT"
}

config_have_crypt_newhash() {
    OUT=".config_have_crypt_newhash"
    OUT_C=".config_have_crypt_newhash.c"
    echo "/* generated by configure */" > "$OUT_C"
    echo "#include <pwd.h>" >> "$OUT_C"
    echo "#include <unistd.h>" >> "$OUT_C"
    echo "int main (void) {" >> "$OUT_C"
    echo "  char hash[_PASSWORD_LEN];" >> "$OUT_C"
    echo "  return crypt_newhash(\"123\", \"bcrypt,a\", hash, sizeof(hash));" >> "$OUT_C"
    echo "}" >> "$OUT_C"
    if $LIBTOOL --tag CC --mode link ${CC} ${CPPFLAGS} ${CFLAGS} \
                "$OUT_C" -o "$OUT" >/dev/null 2>&1; then
        echo "#define HAVE_CRYPT_NEWHASH 1" >> "${CONFIG_H}"
        HAVE_CRYPT_NEWHASH=true
    else
        echo "#define HAVE_CRYPT_NEWHASH 0" >> "${CONFIG_H}"
        HAVE_CRYPT_NEWHASH=false
    fi
    rm -f "$OUT_C"
    rm -f "$OUT"
}

config_have_pthread() {
    if [ "x$(uname)" = "xDarwin" ]; then
        config_have PTHREAD false
    else
	if uname -s | grep -qi mingw; then
            config_have PTHREAD false
	else
            config_have PTHREAD true
	fi
    fi
}

config_have_stat_mtim() {
    OUT=".config_have_stat_mtim"
    OUT_C=".config_have_stat_mtim.c"
    echo "/* generated by configure */" > "$OUT_C"
    echo "#include <sys/stat.h>" >> "$OUT_C"
    echo "#ifdef __APPLE__" >> "$OUT_C"
    echo "# define st_mtim st_mtimespec" >> "$OUT_C"
    echo "#endif" >> "$OUT_C"
    echo "int main (void) {" >> "$OUT_C"
    echo "  struct stat tmp;" >> "$OUT_C"
    echo "  tmp.st_mtim.tv_sec = 0;" >> "$OUT_C"
    echo "  tmp.st_mtim.tv_nsec = 0;" >> "$OUT_C"
    echo "  return tmp.st_mtim.tv_sec + tmp.st_mtim.tv_nsec;" \
         >> "$OUT_C"
    echo "}" >> "$OUT_C"
    if $LIBTOOL --tag CC --mode link ${CC} ${CPPFLAGS} ${CFLAGS} \
                "$OUT_C" -o "$OUT" >/dev/null 2>&1; then
        echo "#define HAVE_STAT_MTIM 1" >> "${CONFIG_H}"
        HAVE_STAT_MTIM=true
    else
        echo "#define HAVE_STAT_MTIM 0" >> "${CONFIG_H}"
        HAVE_STAT_MTIM=false
    fi
    rm -f "$OUT_C"
    rm -f "$OUT"
}

config_gnu() {
    if grep -q _GNU_SOURCE /usr/include/features.h 2>/dev/null; then
	CFLAGS="$CFLAGS -D_GNU_SOURCE -D_DEFAULT_SOURCE -D_BSD_SOURCE"
    fi
}

config_i386() {
    if [ "x$(uname -m)" = "xi386" ]; then
	CFLAGS="$CFLAGS -msse2 -mfpmath=sse"
    fi
}

config_include() {
    OUT=".config_$1"
    OUT_C=".config_$1.c"
    shift
    echo "/* generated by configure */" > "$OUT_C"
    while [ $# -gt 1 ]; do
        echo "#include <$1>" >> "$OUT_C"
        shift
    done
    echo "int main (void) { return 0; }" >> "$OUT_C"
    if $LIBTOOL --tag CC --mode link ${CC} ${CPPFLAGS} ${CFLAGS} \
                "$OUT_C" -o "$OUT" >/dev/null 2>&1; then
        echo "#define $1 1" >> "${CONFIG_H}"
        eval "$1=Yes"
    else
        echo "#define $1 0" >> "${CONFIG_H}"
        eval "$1=No"
    fi
    rm -f "$OUT_C"
    rm -f "$OUT"
}

config_include_have() {
    NAME="$1"
    shift
    OUT_C=".config_$NAME.c"
    OUT=".config_$NAME"
    echo "/* generated by configure */" > "$OUT_C"
    echo "$@" >> "$OUT_C"
    echo "int main (void) { return 0; }" >> "$OUT_C"
    if $LIBTOOL --tag CC --mode link ${CC} ${CPPFLAGS} ${CFLAGS} \
                "$OUT_C" ${LIBS} -o "$OUT"; then
        eval "HAVE_$NAME=true"
        echo "HAVE_$NAME = true" >> ${CONFIG_MK}
    else
        eval "HAVE_$NAME=false"
        echo "HAVE_$NAME = false" >> ${CONFIG_MK}
    fi
    rm -f "$OUT" "$OUT_C"
}

config_lib() {
    NAME="$1"
    shift
    OUT_C=".config_$NAME.c"
    OUT=".config_$NAME"
    echo "/* generated by configure */" > "$OUT_C"
    echo "int main (void) { return 0; }" >> "$OUT_C"
    if $LIBTOOL --tag CC --mode link ${CC} ${CPPFLAGS} ${CFLAGS} \
                "$OUT_C" ${LDFLAGS} ${LIBS} $@ -o "$OUT" \
                >/dev/null 2>&1; then
        LIBS="$LIBS $@"
        eval "HAVE_$NAME=true"
        echo "HAVE_$NAME = true" >> ${CONFIG_MK}
    else
        eval "HAVE_$NAME=false"
        echo "HAVE_$NAME = false" >> ${CONFIG_MK}
    fi
    rm -f "$OUT" "$OUT_C"
}

config_lib_have() {
    NAME="$1"
    shift
    OUT_C=".config_$NAME.c"
    OUT=".config_$NAME"
    echo "/* generated by configure */" > "$OUT_C"
    echo "int main (void) { return 0; }" >> "$OUT_C"
    if $LIBTOOL --tag CC --mode link ${CC} ${CPPFLAGS} ${CFLAGS} \
                "$OUT_C" ${LDFLAGS} ${LIBS} $@ -o "$OUT" >/dev/null 2>&1; then
        eval "HAVE_$NAME=true"
        echo "HAVE_$NAME = true" >> ${CONFIG_MK}
    else
        eval "HAVE_$NAME=false"
        echo "HAVE_$NAME = false" >> ${CONFIG_MK}
    fi
    rm -f "$OUT" "$OUT_C"
}

config_no_undefined() {
    OUT_C=".config_no_undefined.c"
    OUT=".config_no_undefined"
    echo "/* generated by configure */" > "$OUT_C"
    echo "int main (void) { return 0; }" >> "$OUT_C"
    if ${LIBTOOL} --tag CC --mode link ${CC} ${CPPFLAGS} ${CFLAGS} \
                  "$OUT_C" ${LDFLAGS} -no-undefined ${LIBS} $@ \
                  -o "$OUT" >/dev/null 2>&1; then
        LDFLAGS="$LDFLAGS -no-undefined"
    fi
    rm -f "$OUT" "$OUT_C"
}

config_objc_include_have() {
    NAME="$1"
    shift
    OUT_M=".config_$NAME.m"
    OUT=".config_$NAME"
    echo "/* generated by configure */" > "$OUT_M"
    echo "$@" >> "$OUT_M"
    echo "int main (void) { return 0; }" >> "$OUT_M"
    if $LIBTOOL --tag CC --mode link ${OBJCC} ${OBJCFLAGS} \
                "$OUT_M" ${LIBS} -o "$OUT" 2>&1; then
        eval "HAVE_$NAME=true"
        echo "HAVE_$NAME = true" >> ${CONFIG_MK}
    else
        eval "HAVE_$NAME=false"
        echo "HAVE_$NAME = false" >> ${CONFIG_MK}
    fi
    rm -f "$OUT" "$OUT_M"
}

config_objc_lib() {
    NAME="$1"
    shift
    OUT_M=".config_$NAME.m"
    OUT=".config_$NAME"
    echo "/* generated by configure */" > "$OUT_M"
    echo "int main (void) { return 0; }" >> "$OUT_M"
    if $LIBTOOL --tag CC --mode link ${OBJCC} ${CPPFLAGS} ${OBJCFLAGS} \
                "$OUT_M" ${LDFLAGS} ${LIBS} $@ \
                -o "$OUT" >/dev/null 2>&1; then
        LIBS="$LIBS $@"
    fi
    rm -f "$OUT" "$OUT_M"
}

config_objc_lib_have() {
    NAME="$1"
    shift
    OUT_M=".config_$NAME.m"
    OUT=".config_$NAME"
    echo "/* generated by configure */" > "$OUT_M"
    echo "int main (void) { return 0; }" >> "$OUT_M"
    if $LIBTOOL --tag CC --mode link ${OBJCC} ${CPPFLAGS} ${OBJCFLAGS} \
                "$OUT_M" ${LIBS} $@ -o "$OUT" >/dev/null 2>&1; then
        eval "HAVE_$NAME=true"
        echo "HAVE_$NAME = true" >> ${CONFIG_MK}
    else
        eval "HAVE_$NAME=false"
        echo "HAVE_$NAME = false" >> ${CONFIG_MK}
    fi
    rm -f "$OUT" "$OUT_M"
}

config_subdirs() {
    for SUBDIR; do
        ( cd "$SUBDIR" && ./configure; )
    done
}

config_win32() {
    if uname -s | grep -qi mingw32; then
	HAVE_WIN32=true
	CPPFLAGS="$CPPFLAGS -mwin32 -municode -DWIN32"
    else
	HAVE_WIN32=false
    fi
    echo "HAVE_WIN32 = ${HAVE_WIN32}" >> ${CONFIG_MK}
}

config_win64() {
    if uname -s | grep -qi mingw64; then
	HAVE_WIN32=true
	HAVE_WIN64=true
	CPPFLAGS="$CPPFLAGS -DWIN32 -DWIN64"
    else
	HAVE_WIN64=false
    fi
    echo "HAVE_WIN32 = ${HAVE_WIN32}" >> ${CONFIG_MK}
    echo "HAVE_WIN64 = ${HAVE_WIN64}" >> ${CONFIG_MK}
}

cpp_o_rule() {
    "$CXX" $CPPFLAGS $CXXFLAGS -M "$1" || {
        echo "$1" | sed -e 's/^\(.*\)\.cpp$/\1.o: \1.cpp/'
    }
    echo "$1: $2" | sed -e 's/^\(.*\)\.cpp: $/\1.o: /'
}

cpp_ext_rule() {
    cpp_o_rule "$2" "$3" | sed -e "s/[.]o:/$1:/"
}

cpp_lo_rule() {
    cpp_ext_rule .lo "$1" "$2"
}

cpp_prog_rule() {
    { cpp_o_rule "$1" "$2" || exit 1; } | sed -e 's/[.]o:/:/'
}

cpp2ext() {
    EXT="$1"; shift
    echo "$@" | sed -e "s/[.]cpp$/${EXT}/" -e "s/[.]cpp /${EXT} /g"
}

cpp2la() {
    cpp2ext .la "$@"
}

cpp2lo() {
    cpp2ext .lo "$@"
}

cpp2o() {
    cpp2ext .o "$@"
}

cpp2prog() {
    echo "$@" | sed -e 's/[.]cpp$//' -e 's/[.]cpp / /g'
}

cxx_o_rule() {
    echo "$1" | sed -e 's/^\(.*\)\.cxx$/\1.o: \1.cxx/'
    echo "$1: $2" | sed -e 's/^\(.*\)\.cxx:/\1.o:/'
}

cxx_ext_rule() {
    cxx_o_rule "$2" "$3" | sed -e "s/\.o:/$1:/"
}

cxx_lo_rule() {
    cxx_ext_rule .lo "$1"
}

cxx_prog_rule() {
    { cxx_o_rule "$1" || exit 1; } | sed -e 's/[.]o:/:/'
}

cxx2ext() {
    EXT="$1"; shift
    echo "$@" | sed -e "s/[.]cxx$/${EXT}/" -e "s/[.]cxx /${EXT} /g"
}

cxx2la() {
    cxx2ext .la "$@"
}

cxx2lo() {
    cxx2ext .lo "$@"
}

cxx2o() {
    cxx2ext .o "$@"
}

cxx2prog() {
    echo "$@" | sed -e 's/[.]cxx$//' -e 's/[.]cxx / /g'
}

env_reset() {
    CPPFLAGS="$ENV_CPPFLAGS"
    CFLAGS="$ENV_CFLAGS"
    CXXFLAGS="$ENV_CXXFLAGS"
    LDFLAGS="$ENV_LDFLAGS"
    LIBS="$ENV_LIBS"
}

objc_o_rule() {
    echo "$1" | sed -e 's/^\(.*\)\.m$/\1.o: \1.m/'
    echo "$1: $2" | sed -e 's/^\(.*\)\.m: /\1.o: /'
}

objc_ext_rule() {
    objc_o_rule "$2" "$3" | sed -e "s/\.o:/$1:/"
}

objc2ext() {
    EXT="$1"; shift
    echo "$@" | sed -e "s/[.]m$/${EXT}/" -e "s/[.]m /${EXT} /g"
}

pkg_config() {
    if pkg-config "$1"; then
	CFLAGS="$CFLAGS $(pkg-config --cflags "$1")"
	CXXFLAGS="$CXXFLAGS $(pkg-config --cflags "$1")"
	LIBS="$LIBS $(pkg-config --libs "$1")"
    fi
}

require_pkg_config() {
    if ! which pkg-config >/dev/null; then
        echo "please install pkg-config" >&2
        exit 1
    fi
}

sources() {
    SOURCES_TMP="$(echo "$2" | sort -u)"
    echo "$1 = \\
$(echo "$SOURCES_TMP" | sed -e 's/^\(.*\)$/	"\1" \\/')
" >> ${SOURCES_MK}
    echo "$1='$(echo "$SOURCES_TMP" | tr '\n' ' ')'" >> ${SOURCES_SH}
}

swift_o_rule() {
    echo "$1" | sed -e 's/^\(.*\)\.swift$/\1.o: \1.c/'
    echo "$1" | sed -e 's/^\(.*\)\.swift$/\1.o: Makefile config.mk/'
}

swift_ext_rule() {
    swift_o_rule "$2" | sed -e "s/[.]o:/$1:/"
}

swift2ext() {
    EXT="$1"; shift
    echo "$@" | sed -e "s/[.]swift$/${EXT}/" -e "s/[.]swift /${EXT} /g"
}

update_and_chmod() {
    if ! cmp "$2" "$3" >/dev/null 2>&1; then
        mv "$2" "$3"
        echo "-> ${PWD}/$3"
    else
        rm "$2"
    fi
    chmod "$1" "$3"
}

update_build() {
    update_build_c
}

update_build_c() {
    BUILD_C_MAIN=build_c_main.tmp
    BUILD_C_ASAN=build_c_asan.tmp
    BUILD_C_COV=build_c_cov.tmp
    BUILD_C_DEBUG=build_c_debug.tmp
    mkdir -p .build

    COMPILE="${LIBTOOL} --tag=CC --mode=compile"
    COMPILE="$COMPILE \${CC} \${CPPFLAGS} \${CFLAGS}"
    COMPILE="$COMPILE -c \"\$1\" -o \"\$2\""

    echo "#!/bin/sh" >> ${BUILD_C_ASAN}
    echo "# gen by configure" >> ${BUILD_C_ASAN}
    echo "LOG=\".build/\$1.debug.log\"" >> ${BUILD_C_ASAN}
    echo "CC=\"${CC}\"" >> ${BUILD_C_ASAN}
    echo "CPPFLAGS=\"${CPPFLAGS_ASAN}\"" >> ${BUILD_C_ASAN}
    echo "CFLAGS=\"${CFLAGS_ASAN}\"" >> ${BUILD_C_ASAN}
    echo "$COMPILE > \"\$LOG\" 2>&1 || $COMPILE" >> ${BUILD_C_ASAN}
    update_and_chmod 755 ${BUILD_C_ASAN} build_c_asan

    echo "#!/bin/sh" >> ${BUILD_C_COV}
    echo "# gen by configure" >> ${BUILD_C_COV}
    echo "LOG=\".build/\$1.debug.log\"" >> ${BUILD_C_COV}
    echo "CC=\"${CC}\"" >> ${BUILD_C_COV}
    echo "CPPFLAGS=\"${CPPFLAGS_COV}\"" >> ${BUILD_C_COV}
    echo "CFLAGS=\"${CFLAGS_COV}\"" >> ${BUILD_C_COV}
    echo "$COMPILE > \"\$LOG\" 2>&1 || $COMPILE" >> ${BUILD_C_COV}
    update_and_chmod 755 ${BUILD_C_COV} build_c_cov

    echo "#!/bin/sh" >> ${BUILD_C_DEBUG}
    echo "# gen by configure" >> ${BUILD_C_DEBUG}
    echo "LOG=\".build/\$1.debug.log\"" >> ${BUILD_C_DEBUG}
    echo "CC=\"${CC}\"" >> ${BUILD_C_DEBUG}
    echo "CPPFLAGS=\"${CPPFLAGS_DEBUG}\"" >> ${BUILD_C_DEBUG}
    echo "CFLAGS=\"${CFLAGS_DEBUG}\"" >> ${BUILD_C_DEBUG}
    echo "$COMPILE > \"\$LOG\" 2>&1 || $COMPILE" >> ${BUILD_C_DEBUG}
    update_and_chmod 755 ${BUILD_C_DEBUG} build_c_debug

    echo "#!/bin/sh" >> ${BUILD_C_MAIN}
    echo "# gen by configure" >> ${BUILD_C_MAIN}
    echo "LOG=\".build/\$1.main.log\"" >> ${BUILD_C_MAIN}
    echo "CC=\"${CC}\"" >> ${BUILD_C_MAIN}
    echo "CPPFLAGS=\"${CPPFLAGS}\"" >> ${BUILD_C_MAIN}
    echo "CFLAGS=\"${CFLAGS}\"" >> ${BUILD_C_MAIN}
    echo "$COMPILE > \"\$LOG\" 2>&1 || $COMPILE" >> ${BUILD_C_MAIN}
    update_and_chmod 755 ${BUILD_C_MAIN} build_c_main
}

update_build_cxx() {
    BUILD_CXX_MAIN=build_cxx_main.tmp
    BUILD_CXX_ASAN=build_cxx_asan.tmp
    BUILD_CXX_COV=build_cxx_cov.tmp
    BUILD_CXX_DEBUG=build_cxx_debug.tmp
    mkdir -p .build

    COMPILE="${LIBTOOL} --tag=CXX --mode=compile"
    COMPILE="$COMPILE \${CXX} \${CPPFLAGS} \${CXXFLAGS}"
    COMPILE="$COMPILE -c \"\$1\" -o \"\$2\""

    echo "#!/bin/sh" >> ${BUILD_CXX_ASAN}
    echo "# gen by configure" >> ${BUILD_CXX_ASAN}
    echo "LOG=\".build/\$1.debug.log\"" >> ${BUILD_CXX_ASAN}
    echo "CXX=\"${CXX}\"" >> ${BUILD_CXX_ASAN}
    echo "CPPFLAGS=\"${CPPFLAGS_ASAN}\"" >> ${BUILD_CXX_ASAN}
    echo "CXXFLAGS=\"${CXXFLAGS_ASAN}\"" >> ${BUILD_CXX_ASAN}
    echo "$COMPILE > \"\$LOG\" 2>&1 || $COMPILE" >> ${BUILD_CXX_ASAN}
    update_and_chmod 755 ${BUILD_CXX_ASAN} build_cxx_asan

    echo "#!/bin/sh" >> ${BUILD_CXX_COV}
    echo "# gen by configure" >> ${BUILD_CXX_COV}
    echo "LOG=\".build/\$1.debug.log\"" >> ${BUILD_CXX_COV}
    echo "CXX=\"${CXX}\"" >> ${BUILD_CXX_COV}
    echo "CPPFLAGS=\"${CPPFLAGS_COV}\"" >> ${BUILD_CXX_COV}
    echo "CXXFLAGS=\"${CXXFLAGS_COV}\"" >> ${BUILD_CXX_COV}
    echo "$COMPILE > \"\$LOG\" 2>&1 || $COMPILE" >> ${BUILD_CXX_COV}
    update_and_chmod 755 ${BUILD_CXX_COV} build_cxx_cov

    echo "#!/bin/sh" >> ${BUILD_CXX_DEBUG}
    echo "# gen by configure" >> ${BUILD_CXX_DEBUG}
    echo "LOG=\".build/\$1.debug.log\"" >> ${BUILD_CXX_DEBUG}
    echo "CXX=\"${CXX}\"" >> ${BUILD_CXX_DEBUG}
    echo "CPPFLAGS=\"${CPPFLAGS_DEBUG}\"" >> ${BUILD_CXX_DEBUG}
    echo "CXXFLAGS=\"${CXXFLAGS_DEBUG}\"" >> ${BUILD_CXX_DEBUG}
    echo "$COMPILE > \"\$LOG\" 2>&1 || $COMPILE" >> ${BUILD_CXX_DEBUG}
    update_and_chmod 755 ${BUILD_CXX_DEBUG} build_cxx_debug

    echo "#!/bin/sh" >> ${BUILD_CXX_MAIN}
    echo "# gen by configure" >> ${BUILD_CXX_MAIN}
    echo "LOG=\".build/\$1.main.log\"" >> ${BUILD_CXX_MAIN}
    echo "CXX=\"${CXX}\"" >> ${BUILD_CXX_MAIN}
    echo "CPPFLAGS=\"${CPPFLAGS}\"" >> ${BUILD_CXX_MAIN}
    echo "CXXFLAGS=\"${CXXFLAGS}\"" >> ${BUILD_CXX_MAIN}
    echo "$COMPILE > \"\$LOG\" 2>&1 || $COMPILE" >> ${BUILD_CXX_MAIN}
    update_and_chmod 755 ${BUILD_CXX_MAIN} build_cxx_main
}

update_build_lib() {
    BUILD_LIB_MAIN=build_lib_main.tmp
    BUILD_LIB_ASAN=build_lib_asan.tmp
    BUILD_LIB_COV=build_lib_cov.tmp
    BUILD_LIB_DEBUG=build_lib_debug.tmp
    mkdir -p .build

    LINK="${LIBTOOL} --tag=CC --mode=link "
    LINK="$LINK \${CC} -shared \${CFLAGS} \${LDFLAGS}"
    LINK="$LINK \${OBJECTS} \${LIBS} -rpath ${LIBDIR} -o \"\$1\""

    echo "#!/bin/sh" >> ${BUILD_LIB_ASAN}
    echo "# gen by configure" >> ${BUILD_LIB_ASAN}
    echo "LOG=\".build/\$1.asan.log\"" >> ${BUILD_LIB_ASAN}
    echo "CC=\"${CC}\"" >> ${BUILD_LIB_ASAN}
    echo "CFLAGS=\"${CFLAGS_ASAN}\"" >> ${BUILD_LIB_ASAN}
    echo "LDFLAGS=\"${LDFLAGS_ASAN}\"" >> ${BUILD_LIB_ASAN}
    echo "OBJECTS=\"${OBJECTS_ASAN}\"" >> ${BUILD_LIB_ASAN}
    echo "LIBS=\"${LIBS_ASAN}\"" >> ${BUILD_LIB_ASAN}
    echo >> ${BUILD_LIB_ASAN}
    echo "$LINK > \"\$LOG\" 2>&1 || $LINK" >> ${BUILD_LIB_ASAN}
    update_and_chmod 755 ${BUILD_LIB_ASAN} build_lib_asan

    echo "#!/bin/sh" >> ${BUILD_LIB_COV}
    echo "# gen by configure" >> ${BUILD_LIB_COV}
    echo "LOG=\".build/\$1.cov.log\"" >> ${BUILD_LIB_COV}
    echo "CC=\"${CC}\"" >> ${BUILD_LIB_COV}
    echo "CFLAGS=\"${CFLAGS_COV}\"" >> ${BUILD_LIB_COV}
    echo "LDFLAGS=\"${LDFLAGS_COV}\"" >> ${BUILD_LIB_COV}
    echo "OBJECTS=\"${OBJECTS_COV}\"" >> ${BUILD_LIB_COV}
    echo "LIBS=\"${LIBS_COV}\"" >> ${BUILD_LIB_COV}
    echo >> ${BUILD_LIB_COV}
    echo "$LINK > \"\$LOG\" 2>&1 || $LINK" >> ${BUILD_LIB_COV}
    update_and_chmod 755 ${BUILD_LIB_COV} build_lib_cov

    echo "#!/bin/sh" >> ${BUILD_LIB_DEBUG}
    echo "# gen by configure" >> ${BUILD_LIB_DEBUG}
    echo "LOG=\".build/\$1.debug.log\"" >> ${BUILD_LIB_DEBUG}
    echo "CC=\"${CC}\"" >> ${BUILD_LIB_DEBUG}
    echo "CFLAGS=\"${CFLAGS_DEBUG}\"" >> ${BUILD_LIB_DEBUG}
    echo "LDFLAGS=\"${LDFLAGS_DEBUG}\"" >> ${BUILD_LIB_DEBUG}
    echo "OBJECTS=\"${OBJECTS_DEBUG}\"" >> ${BUILD_LIB_DEBUG}
    echo "LIBS=\"${LIBS_DEBUG}\"" >> ${BUILD_LIB_DEBUG}
    echo >> ${BUILD_LIB_DEBUG}
    echo "$LINK > \"\$LOG\" 2>&1 || $LINK" >> ${BUILD_LIB_DEBUG}
    update_and_chmod 755 ${BUILD_LIB_DEBUG} build_lib_debug

    echo "#!/bin/sh" >> ${BUILD_LIB_MAIN}
    echo "# gen by configure" >> ${BUILD_LIB_MAIN}
    echo "LOG=\".build/\$1.main.log\"" >> ${BUILD_LIB_MAIN}
    echo "CC=\"${CC}\"" >> ${BUILD_LIB_MAIN}
    echo "CFLAGS=\"${CFLAGS}\"" >> ${BUILD_LIB_MAIN}
    echo "LDFLAGS=\"${LDFLAGS}\"" >> ${BUILD_LIB_MAIN}
    echo "OBJECTS=\"${OBJECTS}\"" >> ${BUILD_LIB_MAIN}
    echo "LIBS=\"${LIBS}\"" >> ${BUILD_LIB_MAIN}
    echo >> ${BUILD_LIB_MAIN}
    echo "$LINK > \"\$LOG\" 2>&1 || $LINK" >> ${BUILD_LIB_MAIN}
    update_and_chmod 755 ${BUILD_LIB_MAIN} build_lib_main
}

update_build_objc() {
    BUILD_OBJC_MAIN=build_objc_main.tmp
    BUILD_OBJC_ASAN=build_objc_asan.tmp
    BUILD_OBJC_COV=build_objc_cov.tmp
    BUILD_OBJC_DEBUG=build_objc_debug.tmp
    COMPILE="${LIBTOOL} --tag=CC --mode=compile \${OBJC} \${CPPFLAGS} \${CFLAGS} -c \"\$1\" -o \"\$2\""
    mkdir -p .build
    LOG=".build/log"

    echo "#!/bin/sh" >> ${BUILD_OBJC_ASAN}
    echo "# gen by configure" >> ${BUILD_OBJC_ASAN}
    echo "OBJC=\"${OBJC}\"" >> ${BUILD_OBJC_ASAN}
    echo "CPPFLAGS=\"${CPPFLAGS_ASAN}\"" >> ${BUILD_OBJC_ASAN}
    echo "CFLAGS=\"${CFLAGS_ASAN}\"" >> ${BUILD_OBJC_ASAN}
    echo "${COMPILE} >> ${LOG} 2>&1 || ${COMPILE}" >> ${BUILD_OBJC_ASAN}
    update_and_chmod 755 ${BUILD_OBJC_ASAN} build_objc_asan

    echo "#!/bin/sh" >> ${BUILD_OBJC_COV}
    echo "# gen by configure" >> ${BUILD_OBJC_COV}
    echo "OBJC=\"${OBJC}\"" >> ${BUILD_OBJC_COV}
    echo "CPPFLAGS=\"${CPPFLAGS_COV}\"" >> ${BUILD_OBJC_COV}
    echo "CFLAGS=\"${CFLAGS_COV}\"" >> ${BUILD_OBJC_COV}
    echo "${COMPILE} >> ${LOG} 2>&1 || ${COMPILE}" >> ${BUILD_OBJC_COV}
    update_and_chmod 755 ${BUILD_OBJC_COV} build_objc_cov

    echo "#!/bin/sh" >> ${BUILD_OBJC_DEBUG}
    echo "# gen by configure" >> ${BUILD_OBJC_DEBUG}
    echo "OBJC=\"${OBJC}\"" >> ${BUILD_OBJC_DEBUG}
    echo "CPPFLAGS=\"${CPPFLAGS_DEBUG}\"" >> ${BUILD_OBJC_DEBUG}
    echo "CFLAGS=\"${CFLAGS_DEBUG}\"" >> ${BUILD_OBJC_DEBUG}
    echo "${COMPILE} >> ${LOG} 2>&1 || ${COMPILE}" >> ${BUILD_OBJC_DEBUG}
    update_and_chmod 755 ${BUILD_OBJC_DEBUG} build_objc_debug

    echo "#!/bin/sh" >> ${BUILD_OBJC_MAIN}
    echo "# gen by configure" >> ${BUILD_OBJC_MAIN}
    echo "OBJC=\"${OBJC}\"" >> ${BUILD_OBJC_MAIN}
    echo "CPPFLAGS=\"${CPPFLAGS}\"" >> ${BUILD_OBJC_MAIN}
    echo "CFLAGS=\"${CFLAGS}\"" >> ${BUILD_OBJC_MAIN}
    echo "${COMPILE} >> ${LOG} 2>&1 || ${COMPILE}" >> ${BUILD_OBJC_MAIN}
    update_and_chmod 755 ${BUILD_OBJC_MAIN} build_objc_main
}

update_build_prog() {
    BUILD_PROG_MAIN=build_prog_main.tmp
    BUILD_PROG_ASAN=build_prog_asan.tmp
    BUILD_PROG_COV=build_prog_cov.tmp
    BUILD_PROG_DEBUG=build_prog_debug.tmp
    mkdir -p .build

    LINK="${LIBTOOL} --tag=CC --mode=link"
    LINK="$LINK \${CC} \${CFLAGS} \${LDFLAGS} \${OBJECTS} \${LIBS}"
    LINK="$LINK -o \"\$1\""

    echo "#!/bin/sh" >> ${BUILD_PROG_ASAN}
    echo "# gen by configure" >> ${BUILD_PROG_ASAN}
    echo "LOG=\".build/\$1.asan.log\"" >> ${BUILD_PROG_ASAN}
    echo "CC=\"${CC}\"" >> ${BUILD_PROG_ASAN}
    echo "CFLAGS=\"${CFLAGS_ASAN}\"" >> ${BUILD_PROG_ASAN}
    echo "LDFLAGS=\"${LDFLAGS_ASAN}\"" >> ${BUILD_PROG_ASAN}
    echo "OBJECTS=\"${OBJECTS_ASAN}\"" >> ${BUILD_PROG_ASAN}
    echo "LIBS=\"${LIBS_ASAN}\"" >> ${BUILD_PROG_ASAN}
    echo >> ${BUILD_PROG_ASAN}
    echo "$LINK > \"\$LOG\" 2>&1 || $LINK" >> ${BUILD_PROG_ASAN}
    update_and_chmod 755 ${BUILD_PROG_ASAN} build_prog_asan

    echo "#!/bin/sh" >> ${BUILD_PROG_COV}
    echo "# gen by configure" >> ${BUILD_PROG_COV}
    echo "LOG=\".build/\$1.cov.log\"" >> ${BUILD_PROG_COV}
    echo "CC=\"${CC}\"" >> ${BUILD_PROG_COV}
    echo "CFLAGS=\"${CFLAGS_COV}\"" >> ${BUILD_PROG_COV}
    echo "LDFLAGS=\"${LDFLAGS_COV}\"" >> ${BUILD_PROG_COV}
    echo "OBJECTS=\"${OBJECTS_COV}\"" >> ${BUILD_PROG_COV}
    echo "LIBS=\"${LIBS_COV}\"" >> ${BUILD_PROG_COV}
    echo >> ${BUILD_PROG_COV}
    echo "$LINK > \"\$LOG\" 2>&1 || $LINK" >> ${BUILD_PROG_COV}
    update_and_chmod 755 ${BUILD_PROG_COV} build_prog_cov

    echo "#!/bin/sh" >> ${BUILD_PROG_DEBUG}
    echo "# gen by configure" >> ${BUILD_PROG_DEBUG}
    echo "LOG=\".build/\$1.debug.log\"" >> ${BUILD_PROG_DEBUG}
    echo "CC=\"${CC}\"" >> ${BUILD_PROG_DEBUG}
    echo "CFLAGS=\"${CFLAGS_DEBUG}\"" >> ${BUILD_PROG_DEBUG}
    echo "LDFLAGS=\"${LDFLAGS_DEBUG}\"" >> ${BUILD_PROG_DEBUG}
    echo "OBJECTS=\"${OBJECTS_DEBUG}\"" >> ${BUILD_PROG_DEBUG}
    echo "LIBS=\"${LIBS_DEBUG}\"" >> ${BUILD_PROG_DEBUG}
    echo >> ${BUILD_PROG_DEBUG}
    echo "$LINK > \"\$LOG\" 2>&1 || $LINK" >> ${BUILD_PROG_DEBUG}
    update_and_chmod 755 ${BUILD_PROG_DEBUG} build_prog_debug

    echo "#!/bin/sh" >> ${BUILD_PROG_MAIN}
    echo "# gen by configure" >> ${BUILD_PROG_MAIN}
    echo "LOG=\".build/\$1.main.log\"" >> ${BUILD_PROG_MAIN}
    echo "CC=\"${CC}\"" >> ${BUILD_PROG_MAIN}
    echo "CFLAGS=\"${CFLAGS}\"" >> ${BUILD_PROG_MAIN}
    echo "LDFLAGS=\"${LDFLAGS}\"" >> ${BUILD_PROG_MAIN}
    echo "OBJECTS=\"${OBJECTS}\"" >> ${BUILD_PROG_MAIN}
    echo "LIBS=\"${LIBS}\"" >> ${BUILD_PROG_MAIN}
    echo >> ${BUILD_PROG_MAIN}
    echo "$LINK > \"\$LOG\" 2>&1 || $LINK" >> ${BUILD_PROG_MAIN}
    update_and_chmod 755 ${BUILD_PROG_MAIN} build_prog_main
}

update_file() {
    if ! cmp "$1" "$2" >/dev/null 2>&1; then
        mv "$1" "$2"
        echo "-> ${PWD}/$2"
    else
        rm "$1"
    fi
}

update_config_h() {
    echo >> "${CONFIG_H}"
    echo "#endif /* ${CONFIG_H_PREFIX}CONFIG_H */" >> ${CONFIG_H}
    if ! cmp "${CONFIG_H}" config.h >/dev/null 2>&1; then
        mv "${CONFIG_H}" config.h
        echo "-> ${PWD}/config.h"
    else
        rm "${CONFIG_H}"
    fi
}

update_config_mk() {
    if ! cmp "${CONFIG_MK}" config.mk >/dev/null 2>&1; then
        mv "${CONFIG_MK}" config.mk
        echo "-> ${PWD}/config.mk"
    else
        rm "${CONFIG_MK}"
    fi
}

update_sources_mk() {
    if ! cmp "${SOURCES_MK}" sources.mk >/dev/null 2>&1; then
        mv "${SOURCES_MK}" sources.mk
        echo "-> ${PWD}/sources.mk"
    else
        rm "${SOURCES_MK}"
    fi
}

update_sources_sh() {
    if ! cmp "${SOURCES_SH}" sources.sh >/dev/null 2>&1; then
        mv "${SOURCES_SH}" sources.sh
        echo "-> ${PWD}/sources.sh"
    else
        rm "${SOURCES_SH}"
    fi
}

CONFIG_H=config.h
CONFIG_H=".config.h.tmp"
echo "/* config.h generated by configure */" > ${CONFIG_H}
echo "#ifndef ${CONFIG_H_PREFIX}CONFIG_H" >> ${CONFIG_H}
echo "#define ${CONFIG_H_PREFIX}CONFIG_H" >> ${CONFIG_H}
echo >> "${CONFIG_H}"

CONFIG_MK=config.mk
CONFIG_MK=".config.mk.tmp"
echo "# config.mk generated by configure" > ${CONFIG_MK}

SOURCES_MK=sources.mk
SOURCES_MK=".sources.mk.tmp"
SOURCES_SH=sources.sh
SOURCES_SH=".sources.sh.tmp"

VER=0.1
echo "VER = $VER" >> ${CONFIG_MK}
echo "SRC_TOP = $SRC_TOP" >> ${CONFIG_MK}

ENV_CPPFLAGS="$CPPFLAGS"
ENV_CFLAGS="$CFLAGS"
ENV_CXXFLAGS="$CXXFLAGS"
ENV_LDFLAGS="$LDFLAGS"
ENV_LIBS="$LIBS"

if [ "x$CC" = "x" ]; then
    if test -n $(which cc); then
        CC=cc
    elif test -n $(which gcc); then
        CC=gcc
    fi
fi
echo "CC = $CC" >> ${CONFIG_MK}

CC_TARGET=$(LC_ALL=C cc -v 2>&1 | grep 'Target: ' | cut -c 9-)
echo "CC_TARGET = $CC_TARGET" >> ${CONFIG_MK}

if [ "x$CXX" = "x" ]; then
    if test -n $(which c++); then
        CXX=c++
    elif test -n $(which g++); then
        CXX=g++
    fi
fi
echo "CXX = $CXX" >> ${CONFIG_MK}

if [ "x$GCOV" = "xfalse" ]; then
    HAVE_GCOV=false
else
    if [ "x$GCOV" = "x" ]; then
        if which gcov >/dev/null 2>&1; then
	    GCOV=gcov
            HAVE_GCOV=true
        elif which egcov >/dev/null 2>&1; then
	    GCOV=egcov
            HAVE_GCOV=true
        fi
        HAVE_GCOV=false
    else
        HAVE_GCOV=true
    fi
fi
echo "HAVE_GCOV = $HAVE_GCOV" >> ${CONFIG_MK}
if ${HAVE_GCOV}; then
    echo "GCOV = $GCOV" >> ${CONFIG_MK}
fi

if [ "x$GDB" = "x" ]; then
    if which egdb >/dev/null 2>&1; then
        GDB=egdb
    else
        GDB=gdb
    fi
fi
echo "GDB = $GDB" >> ${CONFIG_MK}

if [ "x$GMAKE" = "x" ]; then
    if which gmake >/dev/null 2>&1; then
        GMAKE=gmake
    else
        GMAKE=make
    fi
fi
echo "GMAKE = $GMAKE" >> ${CONFIG_MK}

if [ "x$INSTALL" = "x" ]; then
    if test -x "$(which install)"; then
        INSTALL=install
    fi
fi
echo "INSTALL = $INSTALL" >> ${CONFIG_MK}

if [ "x$LIBTOOL" = "x" ]; then
    if test -x "$(which glibtool 2>/dev/null)"; then
        LIBTOOL="$(which glibtool)"
    elif test -x "/usr/local/bin/libtool"; then
        LIBTOOL="/usr/local/bin/libtool"
    elif test -x "$(which libtool 2>/dev/null)"; then
        LIBTOOL="$(which libtool)"
    else
        LIBTOOL=libtool
    fi
fi
echo "LIBTOOL = $LIBTOOL" >> ${CONFIG_MK}

#if [ "x$SWIFTC" = "x" ]; then
#    if test -x "$(which swiftc 2>/dev/null)"; then
#        SWIFTC="$(which swiftc)"
#	HAVE_SWIFT=true
#    else
#	HAVE_SWIFT=false
#    fi
#else
#    HAVE_SWIFT=true
#fi
#echo "SWIFTC = $SWIFTC" >> ${CONFIG_MK}
#echo "HAVE_SWIFT = $HAVE_SWIFT" >> ${CONFIG_MK}

if [ "x$OBJC" = "x" ]; then
    if test -x "$(which clang 2>/dev/null)"; then
        OBJC="$(which clang)"
    else
        OBJC=clang
    fi
fi
echo "OBJC = $OBJC" >> ${CONFIG_MK}

PREFIX="${PREFIX:-/usr/local}"
echo "PREFIX = $PREFIX" >> ${CONFIG_MK}
echo "DESTDIR ?=" >> ${CONFIG_MK}
echo "prefix ?= ${DESTDIR}${PREFIX}" >> ${CONFIG_MK}

if [ "x$OWNER" = "x" ]; then
    OWNER="$(ls -ld "$PREFIX" | tr -s ' ' | cut -d ' ' -f 3)"
fi
echo "OWNER = $OWNER" >> ${CONFIG_MK}

if [ "x$GROUP" = "x" ]; then
    GROUP="$(ls -ld "$PREFIX" | tr -s ' ' | cut -d ' ' -f 4)"
fi
echo "GROUP = $GROUP" >> ${CONFIG_MK}

if [ "x$BINDIR" = "x" ]; then
    BINDIR="${PREFIX}/bin"
fi
echo "BINDIR = $BINDIR" >> ${CONFIG_MK}

if [ "x$LIBDIR" = "x" ]; then
    LIBDIR="${PREFIX}/lib"
fi
echo "LIBDIR = $LIBDIR" >> ${CONFIG_MK}

config_no_undefined

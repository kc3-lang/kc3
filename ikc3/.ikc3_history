inspect((Sw) -300000000000000000000000000000000000000000)
inspect({1, 2})
inspect({"a', 2})
inspect({"a", 2})
"#{inspect({"a", 2})}"
"#{inspect({:a, 2})}"
x = "123"; "#{inspect({x, 2})}"
"#{inspect({x, %HTTP.Upload{}})}"
"#{inspect(%HTTP.Upload{})}"
quit
q
"#{inspect(%HTTP.Upload{})}"
git diff
Math.pow(2, 3)
Math.greatest_divisor(4)
Math.greatest_divisor(5)
Math.greatest_divisor(6)
Math.greatest_divisor(4)
Math.greatest_divisor(1)
Math.greatest_divisor(2)
Math.greatest_divisor(3)
Math.greatest_divisor(4)
Math.greatest_divisor(5)
Math.nth_mersenne_prime(2, 1)
Math.nth_mersenne_prime(2, 2)
Math.nth_mersenne_prime(2, 3)
Math.nth_mersenne_prime(2, 1)
Math.nth_mersenne_prime(2, 2)
Math.nth_mersenne_prime(2, 3)
Math.nth_mersenne_prime(2, 4)
Math.nth_mersenne_prime((Integer) 2, 4)
Math.nth_mersenne_prime(2, 4)
Math.nth_mersenne_prime(2, 1)
Math.nth_mersenne_prime(2, 2)
Math.nth_mersenne_prime(2, 3)
Math.nth_mersenne_prime(2, 4)
Math.nth_mersenne_prime(2, 5)
type(Math.nth_mersenne_prime(2, 5))
Math.mersenne_prime(1)
Math.mersenne_prime_test(5)
Math.mersenne_prime_test(6)
Math.next_greatest_divisor(1)
Math.next_greatest_divisor(2)
Math.next_greatest_divisor(3)
Math.next_greatest_divisor(4)
Math.next_greatest_divisor(1)
Math.next_greatest_divisor(2)
Math.next_greatest_divisor(3)
Math.next_greatest_divisor(4)
Math.next_greatest_divisor(1)
Math.next_greatest_divisor(2)
Math.next_greatest_divisor(3)
Math.next_greatest_divisor(4)
Math.next_greatest_divisor(5)
Math.next_greatest_divisor(4)
Math.next_prime(1024)
Math.next_prime(10240)
Math.next_prime(102400)
123
__DIR__
Ratio.pow(2/3, 3/1)
1 + 1
inspect(fn (a, b) { a + b })
type(fn (a, b) { a + b })
x = fn (a, b) { a + b }
inspect(x)
x = fn (a, b) { a + b }
inspect(x)
x = fn (a, b) { a + b }
inspect(x)
+(1, 1)
1 + 1
2 + 2
op = %KC3.Op{callable: fn (a, b) { a + b }}
(Ptr) op
p = (Ptr) op
op = %KC3.Op{callable: fn (a, b) { a + b }}
p = (Ptr) op
(KC3.Op) p
op = %KC3.Op{callable: fn (a, b) { a + b }}
op
a = op
a = ^ op
puts("#{1 + 1}")
1 + 1
?
type(?)
? = 1
r
Facts.with_tags(Facts.env_db(), s = ?, p = ?, o = ?, fn (fact) { puts("#{s} #{p} #{o}") ; :ok })
? = 1
if (tag->data.pvar->bound &&
a = 1
"#{a}"
fn () { "#{a}" }
b = fn () { "#{a}" }
b())
(
)

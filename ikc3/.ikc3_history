123
__DIR__
Ratio.pow(2/3, 3/1)
1 + 1
inspect(fn (a, b) { a + b })
type(fn (a, b) { a + b })
x = fn (a, b) { a + b }
inspect(x)
x = fn (a, b) { a + b }
inspect(x)
x = fn (a, b) { a + b }
inspect(x)
+(1, 1)
1 + 1
2 + 2
op = %KC3.Op{callable: fn (a, b) { a + b }}
(Ptr) op
p = (Ptr) op
op = %KC3.Op{callable: fn (a, b) { a + b }}
p = (Ptr) op
(KC3.Op) p
op = %KC3.Op{callable: fn (a, b) { a + b }}
op
a = op
a = ^ op
puts("#{1 + 1}")
1 + 1
?
type(?)
? = 1
r
Facts.with_tags(Facts.env_db(), s = ?, p = ?, o = ?, fn (fact) { puts("#{s} #{p} #{o}") ; :ok })
? = 1
if (tag->data.pvar->bound &&
a = 1
"#{a}"
fn () { "#{a}" }
b = fn () { "#{a}" }
b())
(
)
a = ?
a <- fn (x) { if x > 0 do a(x - 1) else stacktrace() end }
a(3)
require EKC3
EKC3.parse_template_str("Abc")
EKC3.parse_template_str("<%= :verbose %>")
EKC3.parse_template_str("<% :silent %>")
EKC3.parse_template_str("Start<%= :verbose %>Mid<% :silent %>End")
require EKC3
EKC3.parse_template_str("Abc")

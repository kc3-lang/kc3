defmodule FXController do

  require File
  require List
  require Str

  def fx_index = fn {
    (path, target) { fx_index(path, target, path, []) }
    ([], target, dir, acc) { List.reverse(acc) }
    ([file | rest], target, dir, acc) {
      path = dir + file
      if (Str.starts_with?(file, ".") ||
          File.is_directory?(path)) do
        fx_index(rest, target, dir, acc)
      else
        url = Str.slice(path, 1, -1)
        if File.is_directory?(path) do
          #items = fx_index(List.sort(File.list(path)), target,
          #  path + "/", [])
          items = []
          item = %{type: :dir,
                   url: url,
                   name: file,
                   items: items}
          fx_index(rest, target, dir, [item | acc])
        else
          item = %{type: :file,
                   url: url,
                   name: file,
                   items: []}
          fx_index(rest, target, dir, [item | acc])
        end
      end
    }
    (path, target, dir, acc) {
      if (type(path) == Str) do
        fx_index(List.sort(File.list(path)), target, dir, acc)
      end
    }
  }

  def get_menu_index = fn {
    (path, target) { get_menu_index(path, target, path, []) }
    ([], target, dir, acc) { List.reverse(acc) }
    ([file | rest], target, dir, acc) {
      path = dir + file
      if (Str.starts_with?(file, ".") ||
          ! File.is_directory?(path)) do
        get_menu_index(rest, target, dir, acc)
      else
        url = Str.slice(path, 1, -1)
        if File.is_directory?(path) do
          items = []
          item = %{type: :dir,
                   url: url,
                   name: file,
                   items: items}
          get_menu_index(rest, target, dir, [item | acc])
        else
          item = %{type: :file,
                   url: url,
                   name: file,
                   items: []}
          get_menu_index(rest, target, dir, [item | acc])
        end
      end
    }
    (path, target, dir, acc) {
      if (type(path) == Str) do
        get_menu_index(List.sort(File.list(path)), target, dir, acc)
      end
    }
  }

  def get_properties = fn (path) {
    Facts.collect_with_tags(Facts.env_facts(), path, ?, ?,
      fn (fact) { {fact.predicate, fact.object} })
  }

  def show_file = fn (path) {
    if (File.exists?(path)) do
      if (File.is_directory?(path)) do
        slash = if Str.ends_with?(path, "/") do "" else "/" end
        path = path + slash
        menu_index = get_menu_index(path, path)
        menu = FXView.render_index(menu_index)
        index = fx_index(path, path)
        file = FXView.render_index(index)
      else
        menu_path = File.dirname(path)
        menu_index = get_menu_index(menu_path, path)
        menu = FXView.render_index(menu_index)
        file = FXView.render_show_file_preview(path)
      end
      properties = get_properties(path)
      page = FXView.render_show_file(path, menu, file, properties)
      body = LayoutView.render(path, page)
      %HTTP.Response{body: body}
    end
  }

  def route = fn (req) {
    if ((req.method == GET ||
         req.method == HEAD) &&
        (req.url == "/fx" ||
         Str.starts_with?(req.url, "/fx/"))) do
      path = "." + req.url
      show_file(path)
    end
  }

end

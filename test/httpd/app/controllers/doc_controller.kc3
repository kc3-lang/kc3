defmodule DocController do

  require EKC3
  require File
  require List
  require Str

  def available_locales = ["en", "fr"]

  def doc_index = fn {
    (path, path_md) { doc_index(path, path_md, path, []) }
    ([], path_md, dir, acc) { List.reverse(acc) }
    ([file | rest], path_md, dir, acc) {
      if (Str.starts_with?(file, ".") ||
          Str.starts_with?(file, "index.") ||
          (Str.rindex_character(file, '.') > 0 &&
           ! Str.ends_with?(file, ".md") &&
           ! Str.ends_with?(file, ".html"))) do
        doc_index(rest, path_md, dir, acc)
      else
        path = dir + file
        name = Str.subst(file, "_", " ")
        url = Str.slice(path, 1, -1)
        if File.is_directory?(path) do
          if List.find_if(acc, fn (item) {
                item.type == :dir &&
                item.base_url == url
            }) do
            doc_index(rest, path_md, dir, acc)
          else
            items = doc_index(List.sort(File.list(path)), path_md,
              path + "/", [])
            url_locale = if locale == "en" do url else
              "/#{locale}#{url}"
            end
            item = %{type: :dir,
                     base_url: url,
                     url: url_locale,
                     name: name,
                     items: items}
            doc_index(rest, path_md, dir, [item | acc])
          end
        else
          end_ = Str.rindex_character(name, '.')
          if (end_ > 0) do
            name = Str.slice(name, 0, end_)
            end_ = Str.rindex_character(name, '.')
            if (end_ > 0) do
              name = Str.slice(name, 0, end_)
            end
          end
          end_ = Str.rindex_character(url, '.')
          if (end_ > 0) do
            url = Str.slice(url, 0, end_)
            end_ = Str.rindex_character(url, '.')
            if (end_ > 0) do
              url = Str.slice(url, 0, end_)
            end
          end
          if List.find_if(acc, fn (item) {
                item.type == :file &&
                item.base_url == url
            }) do
            doc_index(rest, path_md, dir, acc)
          else
            url_locale = if locale == "en" do url else
              "/#{locale}#{url}"
            end
            item = %{type: :file,
                     base_url: url,
                     url: url_locale,
                     name: name,
                     items: []}
            doc_index(rest, path_md, dir, [item | acc])
          end
        end
      end
    }
    (path, path_md, dir, acc) {
      if (type(path) == Str) do
        doc_index(List.sort(File.list(path)), path_md, dir, acc)
      end
    }
  }

  def doc_index_sitemap = fn {
    (path) { doc_index_sitemap(path, path, []) }
    ([], dir, acc) { List.sort(acc) }
    ([file | rest], dir, acc) {
      if (Str.starts_with?(file, ".") ||
          Str.starts_with?(file, "index.") ||
          (Str.rindex_character(file, '.') > 0 &&
           ! Str.ends_with?(file, ".md") &&
           ! Str.ends_with?(file, ".html"))) do
        doc_index_sitemap(rest, dir, acc)
      else
        path = dir + file
        name = Str.subst(file, "_", " ")
        url = Str.slice(path, 1, -1)
        if File.is_directory?(path) do
          items = doc_index_sitemap(List.sort(File.list(path)),
            path + "/", acc)
          doc_index_sitemap(rest, dir, [url | items])
        else
          locale = List.find_if(DocController.available_locales,
            fn (locale) {
              if Str.has_str?(path, ".#{locale}.") do
                locale
              end
            })
          if locale && locale != "en" do
            url = "/#{locale}#{url}"
          end
          end_ = Str.rindex_character(name, '.')
          if (end_ > 0) do
            name = Str.slice(name, 0, end_)
            end_ = Str.rindex_character(name, '.')
            if (end_ > 0) do
              name = Str.slice(name, 0, end_)
            end
          end
          end_ = Str.rindex_character(url, '.')
          if (end_ > 0) do
            url = Str.slice(url, 0, end_)
            end_ = Str.rindex_character(url, '.')
            if (end_ > 0) do
              url = Str.slice(url, 0, end_)
            end
          end
          doc_index_sitemap(rest, dir, [url | acc])
        end
      end
    }
    (path, dir, acc) {
      if (type(path) == Str) do
        doc_index_sitemap(List.sort(File.list(path)), dir, acc)
      end
    }
  }

  def show_html = fn (path_html, url) {
    index = doc_index("./doc/", path_html)
    menu = DocView.render_menu(index)
    title = "kc3-lang.org"
    slug = Str.slice(path_html, 0, -9)
    slug = Str.subst(slug, " ", "-")
    slug = Str.subst(slug, ".", "-")
    slug = Str.subst(slug, "/", "-")
    slug = "doc #{slug}"
    html = File.read_all(path_html)
    page = DocView.render_show(menu, html)
    body = LayoutView.render(slug, title, page, url)
    %HTTP.Response{body: body}
  }

  def show_md = fn (path_md, url) {
    index = doc_index("./doc/", path_md)
    menu = DocView.render_menu(index)
    title = "kc3-lang.org"
    md = File.read_all(path_md)
    [title | _] = Markdown.titles(md)
    slug = Str.subst(title, " ", "-")
    slug = Str.subst(slug, ".", "-")
    slug = Str.subst(slug, "/", "-")
    slug = "doc #{slug}"
    html = Markdown.to_html_str(md)
    page = DocView.render_show(menu, html)
    body = LayoutView.render(slug, title, page, url)
    %HTTP.Response{body: body}
  }

    
  def route_locale = fn (url, locale) {
    path_html = ".#{url}/index.#{locale}.html"
    if File.exists?(path_html) do
      show_html(path_html, url)
    else
      path_md = ".#{url}/index.#{locale}.md"
      if File.exists?(path_md) do
        show_md(path_md, url)
      else
        path_md = ".#{url}.#{locale}.md"
        if File.exists?(path_md) do
          show_md(path_md, url)
        end
      end
    end
  }
  
  def route = fn (request) {
    url = request.url
    if (request.method == GET ||
      request.method == HEAD) do
      locale = if (url[0] == '/' &&
                   (Str.size(url) == 3 ||
                    url[3] == '/')) do
        l = "#{url[1]}#{url[2]}"
        if List.has?(available_locales, l) do
          url = Str.slice(url, 3, -1)
          l
        end
      end || "en"
      if (Str.starts_with?(url, "/doc/") ||
          url == "/doc") do
        route_locale(url, locale) || route_locale(url, "en")
      end
    end
  }

end

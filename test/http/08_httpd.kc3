events = [:read]
if List.has?(events, :read) do
  # maybe_reload_app()
  request = void
  request = %HTTP.Request{method: GET,
                          body: %{},
                          url: "/",
                          client_addr: "::1"}
  client_addr = if client.addr_str != "127.0.0.1" do
    client.addr_str
  else
    headers = request.headers
    real_ip = headers["X-Real-IP"]
    if (real_ip) do real_ip else client.addr_str end
  end
  request = Struct.put(request, :client_addr, client_addr)
  user_agent = HTTP.Request.header(request, "User-Agent")
  puts("--- #{client_addr} #{request.method} #{request.url} #{inspect(user_agent)}")
  if (type(request.method) == Str) do
    response = error_405_page(request)
  else
    request = plug_request(request)
    response = route_and_render_request(request)
  end
  clean_request_uploads(request.body)
  response = HTTP.Response.set_header(response,
    "Connection", "Keep-Alive")
  response = HTTP.Response.set_header(response,
    "Keep-Alive", "timeout=5, max=1000")
  response = HTTP.Response.set_header(response,
    "Server", "kc3_httpd")
  response = HTTP.Response.set_header(response,
    "Accept-Ranges", "bytes")
  r = HTTP.Response.buf_write(response, client.buf_rw.w,
    request.method != HEAD)
  puts("#{response.code} #{client_addr} #{request.method} #{request.url} #{inspect(user_agent)}")
end

quote event_base = HTTP.Event.init()
event_base = HTTP.Event.init()
quote socket = Socket.listen("0.0.0.0", "57000")
socket = Socket.listen("0.0.0.0", "57000")
echo_client = fn (socket, events, client_ev, client) do
  if List.has?(events, :read) && List.has(events, :write) do
    Buf.refill(client.buf_rw.r)
    str = Buf.read_to_str(client.buf_rw.r)
    Buf.write_str(client.buf_rw.w, str)
    
  end
end
acceptor = fn (server_socket, events, acceptor_ev, void) do
  if List.has?(events, :read) do
    client = Socket.Buf.accept(server_socket)
    client_ev = HTTP.Event.new(client.sockfd, [:read, :write],
      echo_client, client)
    HTTP.Event.add(client_ev, Time.now() + %Time{tv_sec: 30})
  end
end
quote acceptor_ev = HTTP.Event.new(socket.fd, [:read, :persist], acceptor,
                                   void)
acceptor_ev = HTTP.Event.new(socket.fd, [:read, :persist], acceptor,
                             void)
quote r = HTTP.Event.dispatch()
r = HTTP.Event.dispatch()
quote if r do
  e = errno()
  puts("HTTP.Event.dispatch: #{r}: #{strerror(e)}")
end
if r do
  e = errno()
  puts("HTTP.Event.dispatch: #{r}: #{strerror(e)}")
end

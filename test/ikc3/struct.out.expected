require GL.Vec2
GL.Vec2
require GL.Vec3
GL.Vec3
(F128) 0.0
(F128) 0.0
%GL.Vec3{}
%GL.Vec3{x: (F32) 0.0,
         y: (F32) 0.0,
         z: (F32) 0.0}
[position: %GL.Vec3{},
 normal: %GL.Vec3{},
 tex_coord: %GL.Vec2{}]
[position: %GL.Vec3{x: (F32) 0.0,
                    y: (F32) 0.0,
                    z: (F32) 0.0},
 normal: %GL.Vec3{x: (F32) 0.0,
                  y: (F32) 0.0,
                  z: (F32) 0.0},
 tex_coord: %GL.Vec2{x: (F32) 0.0,
                     y: (F32) 0.0}]
defmodule Test do
  defstruct [array: (U8[]) {},
             do_block: do 0 end,
             bool: false,
             character: 'â†’',
             f32: (F32) 0.0,
             f64: (F64) 0.0,
             f128: (F128) 0.0,
             integer: (Integer) 0,
             ratio: 0/1,
             sw: (Sw) 0,
             s64: (S64) 0,
             s32: (S32) 0,
             s16: (S16) 0,
             s8: (S8) 0,
             u8: 0,
             u16: (U16) 0,
             u32: (U32) 0,
             u64: (U64) 0,
             uw: (Uw) 0,
             plist: [],
             map: %{zero: 0},
             pcall: quote 0 + 0,
             pcallable: fn () { 0 },
             pcomplex: 0 +i 0,
             pointer: (U8*) 0x0,
             pstruct: %KC3.Op{},
             psym: KC3,
             ptr: (Ptr) 0x0,
             ptr_free: (PtrFree) 0x0,
             quote: quote quote 0,
             str: "",
             time: %Time{},
             tuple: {0, 1},
             ident: quote zero]
end
Test
%Test{}
%Test{array: (U8[]) {},
      do_block: do 0 end,
      bool: false,
      character: '0',
      f32: (F32) 0.0,
      f64: (F64) 0.0,
      f128: (F128) 0.0,
      integer: (Integer) 0,
      ratio: 0/1,
      sw: (Sw) 0,
      s64: (S64) 0,
      s32: (S32) 0,
      s16: (S16) 0,
      s8: (S8) 0,
      u8: 0,
      u16: (U16) 0,
      u32: (U32) 0,
      u64: (U64) 0,
      uw: (Uw) 0,
      plist: [],
      map: %{zero: 0},
      pcall: 0 + 0,
      pcallable: Test.fn () { 0 },
      pcomplex: 0 +i 0,
      pointer: (U8*) 0x0,
      pstruct: %KC3.Op{sym: :+,
                       arity: 2,
                       special: false,
                       precedence: 0,
                       associativity: 1,
                       callable: cfn Tag "tag_add" (Tag, Tag, Result)},
      psym: KC3,
      ptr: (Ptr) 0x0,
      ptr_free: (PtrFree) 0x0,
      quote: quote 0,
      str: "",
      time: %Time{},
      tuple: {0, 1},
      ident: zero}
